%--------------------------------------------------------------------------
%
% scriptCumFit:
%   The script performs a cumulative fit of lifetime data and an 
%   evaluation of the fit based on a BIC/AIC state analysis and a 'Goodnes 
%   of Fit Statistics' analysis.
% 
% Syntax:  
%   scriptCumFit
% 
% Inputs:
%   The script will prompt the user to select a cellData*.mat. This file 
%   is generated by the script lscriptFretTracesStat.mlx. 
%   The file cellData*.mat is a generic variable that contains data from 
%   several smCellFret experiments. Each cell experiment is numbered with
%   an ID. After selecting the file cellData*.mat the script asks the user 
%   to specify the experiment IDs (they are displayed in the Matlab Command 
%   Window) to be analyzed and whether all data sets should be analyzed 
%   together (all data sets are combined into one data set) or individually. 
%   Finally the user has to set the time resolution.
% 
% Outputs:
%   1. cumFitResults - The workspace variable contains the lifetimes, 
%      amplitudes, BIC and AIC states and the Goodnes of Fit Statistics. 
%   2. cumFitStat - The workspace variable contains the result of the BIC
%      and AIC analysis and a summary table with all amplitudes, lifetimes
%      and stdev values (stdev values are only calculated if the option: 
%      'all-together' is set to 'no')
%   3. Both workspace variables are additionally saved in the same folder 
%      as the input file cellData*.mat under the file names:
%       a) cumFitResults_cellData*.mat
%       b) cumFitStat_cellData*.mat
% 
% Other m-files required: 
%   Subfunctions: cumFit_lt
% 
% See also: 
%   cumFit_lt.m (the sub-function can also be used independently of the 
%   script)
%
% Authors: 
%   - P.G.
%
% Copyright:
%    2011-2020 Columbia Univiversity / RFMH All Rights Reserved.
%
% -------------------------------------------------------------------------

%% Initialize Variables
clear;
clc;
nExp = [1,2,3,4];

%% Load filenames
[fName,pName] = uigetfile('*.mat','Select a cellData*.mat file');
filename      = [pName fName];
[~,fn]        = fileparts(filename);
load([pName filesep fName]);
nDir          = size(cellData,2);
disp(cellData(1).path);
disp(['id:1', ' ', cellData(1).acc, ' ', cellData(1).don]);

z=2;
while z<=nDir
    s1=cellData(z-1).path;
    s2=cellData(z).path;
    if strcmp(s1,s2)==1
        disp(['id:', num2str(z), ' ', cellData(z).acc, ' ', cellData(z).don]);
        z=z+1;
    else 
        disp(cellData(z).path);
        disp(['id:', num2str(z), ' ', cellData(z).acc, ' ', cellData(z).don]);
        z=z+1;
    end
end

%% User Input: file Ids
usrData = inputdlg({'Enter space-separated file ids:',...
                    'Analayze all together','Enter time resolution'}, ...
                    'Input',3,...
                    {num2str(1:z-1),'yes','0.04'});
s1=usrData{2,1};
s2='yes';

if isempty([usrData{:}])
    warning('NO DATA AVAILABLE');
    return
    
elseif strcmpi(s1,s2) % analyse cells together
    disp('Analyze data together ...');
    usrSel=str2num(usrData{1,:}); %#ok<ST2NM>
    
    path = cellData(1).path;
    acc = cellData(1).acc;
    don = cellData(1).don;
    
    traceMetadata=[];nTraces=[];nPstFlt=[];density=[];
    for i=usrSel
        nTraces     = [nTraces;     cellData(i).nTraces];    %#ok<AGROW>
        nPstFlt     = [nPstFlt;    cellData(i).nPstFlt];   %#ok<AGROW>
        traceMetadata = [traceMetadata cellData(i).traceMetadata]; %#ok<AGROW>
        density     = [density;     cellData(i).density];    %#ok<AGROW>
    end
    
    % Reset the structure and save combined data
    cellData= struct('path',[],...
                'acc',[],...
                'don',[],...
                'nTraces',[],...
                'nPstFlt',[],...
                'traceMetadata',[],...
                'density',[]);
    cellData.path        = path;
    cellData.acc         = acc;
    cellData.don         = don;
    cellData.nTraces     = sum(nTraces);
    cellData.nPstFlt    = sum(nPstFlt);
    cellData.traceMetadata = traceMetadata;
    cellData.density     = mean(density);
    
    nFiles = 1;
        
elseif ~strcmpi(s1,s2)
    disp('Analyze data individually ...');
    nFiles = str2num(usrData{1,:}); %#ok<ST2NM>
end

%% Fit data
nStates       = numel(nExp);
totalNoExp    = 4;
dt            = str2double(usrData{3,1});
cumFitResults = cell(totalNoExp,2);
curveData     = struct([]);

for i=1:nStates
    tmpCumFit = struct('A1',NaN,'Lt1',NaN,'A2',NaN,'Lt2',NaN,'A3',NaN,'Lt3',NaN,'A4',NaN,'Lt4',NaN,...
                       'BIC',[],'AIC',[],...
                       'sse',[],'rsquare',[],'dfe',[],'adjrsquare',[],'rmse',[]);
                   
    data      = struct('y',NaN,'t',NaN,'tFit',NaN,'yFit',NaN);
    for j=nFiles
        disp(['Fitting ' num2str(nExp(i)) ' State Model (' num2str(j) ')...']);
        lt=[cellData(j).traceMetadata.traceLen]';
        %%% For Diffusion
        %%% lt=lt(lt>=20);
        try
            [tmpCumFit(j),~,~,data(j)] = cumFit_lt(lt,dt,nExp(i));
        catch
            %...
        end
        % create output filename
        path = [ cellData(j).path filesep cellData(j).acc];
        name = ['cumFit_' fn]; 
        try
            figname = [path filesep name num2str(i) '.fig'];
            savefig(figname)
        catch
            %...
        end
        close all
    end
    cumFitResults{nExp(i),1} = tmpCumFit;
    cumFitResults{nExp(i),2} = data;
end


%% Find Minimum of the Bayesian and Akaike Information Criterion
bicValues  = struct('State1',[],'State2',[],'State3',[],'State4',[],'minStatesBIC',[]);
aicValues  = struct('State1',[],'State2',[],'State3',[],'State4',[],'minStatesAIC',[]);
stateNames = {'State1','State2','State3','State4'}; 

minBicValue = zeros(numel(nFiles),1);
 for i=nFiles
     bicValuesTmp = zeros(1,nStates);
     aicValuesTmp = zeros(1,nStates);
     for j=1:nStates
         fn1=stateNames{j};
         BIC=cumFitResults{nExp(j)}(i).BIC;
         
         if isreal(BIC) && ~isempty(BIC)
             bicValues(i).(fn1) = BIC;
             bicValuesTmp(1,j) = BIC;
         else
             bicValues(i).(fn1) = NaN;
             bicValuesTmp(1,j) = NaN;
         end
         
         AIC=cumFitResults{nExp(j)}(i).AIC;
         if isreal(AIC) && ~isempty(AIC)
             aicValues(i).(fn1) = AIC;  
             aicValuesTmp(1,j) = AIC;
         else
             aicValues(i).(fn1) = NaN;  
             aicValuesTmp(1,j) = NaN;
         end
     end
     [~,minBicStats] = min(bicValuesTmp,[],2);
     bicValues(i).minStatesBIC = minBicStats;
     
     [~,minAicStates] = min(aicValuesTmp,[],2);
     aicValues(i).minStatesAIC = minAicStates;
 end

%% Calculate Statistics

% Calculate Lifetime Mean & Stdev 
cumFitMean = struct('meanA1',[],'meanLt1',[],'meanA2',[],'meanLt2',[],...
                    'meanA3',[],'meanLt3',[],'meanA4',[],'meanLt4',[],...
                    'bicStates',[],'aicStates',[],...
                    'adjRSquare',[],'rmse',[]);
cumFitStdv  = struct('stdA1',[],'stdLt1',[],'stdA2',[],'stdLt2',[],...
                    'stdA3',[],'stdLt3',[],'stdA4',[],'stdLt4',[]);

fitParm={'A1','Lt1','A2','Lt2','A3','Lt3','A4','Lt4'};

for i=1:nStates
    for j=1:numel(fitParm)
        fn2=fitParm{j};
        rsquare=[cumFitResults{nExp(i)}.(fn2)];
        if ~isempty(rsquare)
            tmpMean = mean(rsquare);
            tmpStd  = std(rsquare);
            fn2 = ['mean' fitParm{j}];
            cumFitMean(i).(fn2)=tmpMean;
            fn2 = ['std' fitParm{j}];
            cumFitStdv(i).(fn2) =tmpStd;
            
        else 
            continue
        end
    end
end

% Evaluate the information criteria
meanBicMin = round(mean([bicValues.minStatesBIC]));
cumFitMean(meanBicMin).bicStates = mean([bicValues.minStatesBIC]);

meanAicMin = round(mean([aicValues.minStatesAIC]));
cumFitMean(meanAicMin).aicStates = mean([aicValues.minStatesAIC]);

% Save Goodnes of fit statitics
for i=1:nStates
    
    % Mean adjRsquare
    rsquare = [cumFitResults{nExp(i)}.adjrsquare]; 
    if ~isempty(rsquare)
        tmpMean = mean(rsquare);
        cumFitMean(i).adjRSquare =tmpMean;
    else 
        continue
    end
    
    % Mean RMSE
    rmse = [cumFitResults{nExp(i)}.rmse];
    if ~isempty(rmse)
        tmpMean = mean(rmse);
        cumFitMean(i).rmse =tmpMean;
    else 
        continue
    end
end

%% Save Results

disp('Saving cumFitResults.mat in folder:');
disp(pName);
save([pName filesep 'cumFitRes_' fn '.mat'],'cumFitResults');

disp('Saving cumFitStat.mat in folder:');
disp(pName);
cumFitStat    = cell(4,1);
cumFitStat{1} = bicValues;
cumFitStat{2} = aicValues;
cumFitStat{3} = cumFitMean;
cumFitStat{4} = cumFitStdv;
save([pName filesep 'cumFitStat_' fn '.mat'],'cumFitStat');

%% Clear Varialbles
clearvars -except cumFitResults cumFitStat


%% End

