%--------------------------------------------------------------------------
%
% scriptDiffLT.m:
%   The script extracts the lifetime of spots that have only one mode of 
%   diffusion during their entire tracking time. 
% 
% Description:
%   The script computes the number of diffusion modes per trajectory and
%   extracts trajectories that have only one mode of diffusion during their 
%   entire lifetime. Each extracted trajectory is then further classified 
%   as either entirely free diffusion, entirely confined diffusion, 
%   entirely directed diffuison or entirely immobile diffusion. 
% 
% Syntax:  
%   scriptDiffLT
% 
% Inputs:
%   The script prompts the user to select one or more directories 
%   containing the file 'SegResultsFinal.mat'. This file is generated by 
%   scriptGetSegResults.m.
%
% Outputs:
%   1. Single mode diffusion lifetimes from multiple trajectories and 
%   experiments will be concatenated and exported as column vectors, to the
%   Matlab workspace:
%      a) ltDataImob: lifetime data of spots that are immobile during their 
%         entire tracking time (unit in frames)
%      b) ltDataConf: lifetime data of spots that are confined during their 
%         entire tracking time (unit in frames)
%      c) ltDataFree: lifetime data of spots that are freely diffusing 
%         during their entire tracking time (unit in frames)
%      d) ltDataSupr: lifetime data of spots with directed diffusion 
%         during their entire tracking time (unit in frames)
%      
%   2. A structure variable diffFilter with the logical fields: 
%       a) isImob: TRUE if trace is entirely immobile otherwise FALSE. 
%       b) isConf: TRUE if trace is entirely confined otherwise FALSE.
%       c) isFree: TRUE if trace is entirely freely diffusing otherwise 
%          FALSE.
%       d) isSupr: TRUE if trace is entirely in directed diffusion 
%          otherwise FALSE. 
%      The structure diffFilter is saved as a *.mat file in each selected 
%      directory.
% 
% See also: 
%   scriptDiffFilter.m, cumFit_lt (Use script cumFit_lt to get track 
%   lifetimes)
%
% Authors: 
%   - P.G. Feb 2019
%
% Copyright:
%    2011-2020 Columbia Univiversity / RFMH All Rights Reserved.
%
% -------------------------------------------------------------------------
% 
%% Get directories Ch1 or Ch2

clear;
dirArray = getDirs('Select multplie directories Ch1 or Ch2');
nExperiments = length(dirArray(1,:));

if nExperiments==0,return,end

%% Initialize memory 
ltDataImob = [];
ltDataConf = [];
ltDataFree = [];
ltDataSupr = [];
%% Analyze data

for i=1:nExperiments
    
    % Initialize variables
    clear segResultsFinal
    ltImobTmp =[];
    ltConfTmp =[];
    ltFreeTmp =[]; 
    ltSuprTmp =[]; 
    
    % Set current directopry
    basepath = dirArray{2,i};
    dataSet  = dirArray{1,i};
    currentDir = [basepath filesep dataSet];
    
    disp(dataSet);
    
    load([currentDir filesep 'SegResultsFinal.mat']);
    
    % check if variable 'segResultsFinal' exist in workspace
    if ~exist('segResultsFinal','var')==1
        warning('segResultsFinal.mat not avaialable');
        % Skip and go to next data set
        continue
    end
    
    % check if variable 'segResultsFinal' is empty
    if isempty(segResultsFinal)
        warning('segResultsFinal is empty');
        % Skip and go to next data set
        continue 
    end
    
    % Get number of tracks
    ids = segResultsFinal(:,23); % ids column 
    track   = struct([]);
    nTracks = max(ids);
    
    % Initialize fields of the track structure
    [track(1:nTracks).ids]      = deal(NaN);
    [track(1:nTracks).nSeg]     = deal(NaN);
    [track(1:nTracks).isSingle] = deal(false);
    [track(1:nTracks).idx]      = deal(NaN);
    [track(1:nTracks).state]    = deal(NaN);
    
    [track(1:nTracks).isImob]   = deal(false);
    [track(1:nTracks).isConf]   = deal(false);
    [track(1:nTracks).isFree]   = deal(false);
    [track(1:nTracks).isSupr]   = deal(false);
    
    [track(1:nTracks).ltImob]   = deal(NaN);
    [track(1:nTracks).ltConf]   = deal(NaN);
    [track(1:nTracks).ltFree]   = deal(NaN);
    [track(1:nTracks).ltSupr]   = deal(NaN);
    
    for j=1:nTracks
        
        % Get number of segments in a track
        lia = ismember(ids,j); %lia is a logical column
        nSeg = sum(lia); 
        track(j).ids  = j;
        track(j).nSeg = nSeg;
        
        % Only get lifetime of tracks with one segment, i.e. a particle which 
        % has only one mode of diffusion during the time of observation    
        if nSeg == 1
            track(j).isSingle = true;
            idx = find(lia == 1); % find the idx where vector is logical true 
            track(j).idx   = idx;
            track(j).state = segResultsFinal(idx,3);
            
            % Select the diffusion state and get track lifetime 
            switch segResultsFinal(idx,3)
                
                case 0
                    %--- immobile diffusion (state 0)
                    track(j).isImob = true;
                    track(j).ltImob = segResultsFinal(idx,24);
                
                case 1
                    %--- confined diffusion (state 1)
                    track(j).isConf = true;
                    track(j).ltConf = segResultsFinal(idx,24);
                    
                case 2
                    %--- free diffusion     (state 2)
                    track(j).isFree = true;
                    track(j).ltFree = segResultsFinal(idx,24);
                                    
                case 3
                    %--- super diffusion    (state 3)
                    track(j).isSupr = true;
                    track(j).ltSupr = segResultsFinal(idx,24);

            end   
        end
    end
    
    % Save logical filter variables of each experiment to file
    diffFilter = struct('isImob', {track(1:nTracks).isImob},...
                        'isConf', {track(1:nTracks).isConf},...
                        'isFree', {track(1:nTracks).isFree},...
                        'isSupr', {track(1:nTracks).isSupr});
    
    save([currentDir filesep 'diffFilter.mat'],'diffFilter');
    
    % Combine lt-values from multiple data sets 
    ltImobTmp  = [track.ltImob]';
    ltImobTmp  = rmmissing(ltImobTmp); 
    ltDataImob = [ltDataImob; ltImobTmp]; %#ok<AGROW>
    
    ltConfTmp  = [track.ltConf]';
    ltConfTmp  = rmmissing(ltConfTmp);
    ltDataConf = [ltDataConf; ltConfTmp]; %#ok<AGROW>
    
    ltFreeTmp  = [track.ltFree]';
    ltFreeTmp  = rmmissing(ltFreeTmp);
    ltDataFree = [ltDataFree; ltFreeTmp]; %#ok<AGROW>
    
    ltSuprTmp  = [track.ltSupr]';
    ltSuprTmp  = rmmissing(ltSuprTmp);
    ltDataSupr = [ltDataSupr; ltSuprTmp]; %#ok<AGROW>
    
    

end
%% End



