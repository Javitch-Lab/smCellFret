%--------------------------------------------------------------------------
%
% scriptTotalFilter_traces.m:
%   Applies a total intensity filter to a fretTraces structure variable 
%   saved in a fretTraces*.traces file. 
% 
% Description:
%   Running scriptTotalFilter.m provides the possibility to use only FRET 
%   traces with total intensities in a predefined interval in the further
%   downstream data analysis. This step is particularly useful for cleaning 
%   up trace populations that have not yet been processed by other filters. 
% 
% Syntax:  
%   scriptTotalFilter_traces
% 
% Inputs:
%   1. The File Explorer prompts the user to select one or more fretTraces 
%      files of type *sync.traces' to which the filter should be applied.
%      Traces of type *sync.traces' are generated by scriptPostSyncTraces.m
%   2. In the code section 'Filter data', update the value for the mean
%      total intensity and its standard deviation. The default values for 
%      the mean and standard deviation here were calculated from time 
%      traces measured in fixed cells.
% 
% Outputs:
%   The filtered structure variable 'fretTraces' is saved at the same 
%   location and under the same file name as the input file with the 
%   additional extension *_flt.traces. 
% 
% See also: 
%   scriptPostSyncTraces.m
%
% Authors: 
%   - P.G. Jun 2020
%
% Copyright:
%    2011-2020 Columbia Univiversity / RFMH All Rights Reserved.
%
% -------------------------------------------------------------------------

%% Set initial Parameters
clear;

%% -------------------------------------------------------------------------
% Get files from user
% -------------------------------------------------------------------------

% Get FILES
tfiles = getFiles('*.traces','Select *.traces files');

% Check if files array is empty
if any(cellfun('isempty',tfiles))== true; return;end

% Show selection
for z=1:numel(tfiles)
    [path,name,ext]=fileparts(tfiles{z});
    disp(path);
    disp([name ext]);
end

%% -------------------------------------------------------------------------
% Filter data
% -------------------------------------------------------------------------

% Total Intensity Filter Parameters 
fixedMean = 457.91;
fixedStdv = 218.144/2;
lwLim = fixedMean-2*fixedStdv;
upLim = fixedMean+3*fixedStdv;

% 
nCells = numel(tfiles);
data    =struct([]);
h = waitbar(0,'Load Data ...');

for j=1:nCells
    clear tmp;
    waitbar(j / nCells)
    
    % load traces file
    tracesFile = tfiles{j};
    tmpData=loadTraces(tracesFile);
    totalInt = tmpData.total;
    [nTraces,nFrames]=size(totalInt);
    
    % save filename
    data(j).file = tracesFile;
    
    % logical Idl Array 
    idl = false(nTraces,nFrames);
    traceLenDon = [tmpData.traceMetadata.traceLenDon].';
    for i=1:nTraces
        %dwtTmp = dwells{2,i}(2);
        dwtTmp = traceLenDon(i); %unit is frames
        idl(i,1:dwtTmp)=true;
    end

    % Calc Total intensity where trace is idealized 
    totalInt_idl2D = totalInt.*idl;
    totalInt_idl2D(totalInt_idl2D==false)=NaN;
    meanTotalPerTrace = nanmean(totalInt_idl2D,2);
    data(j).total = meanTotalPerTrace;

    % Get Filter Idx
    idx = meanTotalPerTrace > lwLim & meanTotalPerTrace < upLim;
    data(j).flt = idx;
    data(j).nMol = sum(idx);

    % Apply Filter to data
    tracesData  = applyFilterToData(tmpData,idx);
    data(j).fltTraces = tracesData;

    % Save Traces to File
    [pathName, fileName, ext]= fileparts(tracesFile);
    newExt = strrep(ext,'.traces','_flt.traces');
    saveTraces([pathName filesep fileName newExt],tracesData)

    
end
close(h)

%% Disp Number of Molecules
nMol = sum([data.nMol].');
disp(['nMol = ' num2str(nMol)]);


%% =======================================================================%
%                                                                         %
%                        Local Callback Functions                         %
%                                                                         %
%=========================================================================%


%% filter matrix array

function fltTraces=applyFilterToData(fretData,idxFilter)

    
    % Update data
    [nTraces,nFrames]=size(fretData.donor); 
    
    % Create traces object
    fltTraces = TracesFret(nTraces,nFrames);
    
    % Metadata Field Names
    metaFN = fieldnames(fretData.traceMetadata);
             
    % Update data
    fltTraces.donor            = fretData.donor(idxFilter,:);
    fltTraces.acceptor         = fretData.acceptor(idxFilter,:);
    fltTraces.fret             = fretData.fret(idxFilter,:);
    fltTraces.time             = fretData.time;
    
    fltTraces.traceMetadata    = [];

    % Update traceMetadata for each trace 
    j=0;
    for i=1:nTraces

        % Apply Filter
        if idxFilter(i)==0; continue;end
        j=j+1;

        %Update Metadata
        for k=1:numel(metaFN)
            fn=metaFN{k};
            if isfield(fretData.traceMetadata,fn)
                fltTraces.traceMetadata(j).(fn) =...
                fretData.traceMetadata(i).(fn);
            end
        end

    end % End Update Metadata
end
%% End































