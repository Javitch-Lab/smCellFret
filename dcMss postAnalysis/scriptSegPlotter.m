%--------------------------------------------------------------------------
%
% scriptSegPlotter:
%   Plot results of the file CombinedStats.mat which is generated by the
%   script scriptGetSegResults.m. 
% 
% Description:
%   The script visualizes the results of the DC-MSS motion analysis. 
% 
% Syntax:  
%   scriptSegPlotter
% 
% Inputs:
%   1. The user is asked to specify the number N of 'CombinedStats' 
%      datasets to be displayed in the same diagram. 
%   2. The user is prompted N times to select a 'CombinedStats.mat' file.
%
% Outputs:
%   Four panel figure with N parallel data sets. 
%   Panel 1: Total fraction of time the particles have spent in one of the 
%            four diffusion states.
%   Panel 2: Mean diffusion coefficient of the four states. 
%   Panel 3: Confinement zones of the immobile and confined state. 
%   Panel 4: Median lifetime of the individual states. 
% 
% 
% See also: 
%   scriptGetSegResults.m, scriptGetSegTrackingAnalysis.m
%
% Author: 
%   - Signe Mathiasen 2018 OuadruplePlotter plots combined stats 
%   - P.G. August 2018 Modified version scriptSegPlotter
%   - P.G. Feb 2019 Adding new structure variables: fraction, diffusion,
%     confinement and lifetime. The values saved in these variables can be  
%     used for plotting in Origin.
%
% Copyright:
%    2011-2020 Columbia Univiversity / RFMH All Rights Reserved.
%
% -------------------------------------------------------------------------

%% Load CombinedStats data into workspace

% Clear workspace
clear;

% Get number of experiments
prompt='Enter the number of datasets (1-4)';
name = 'Plot combinedStats data';
defaultans = {'2'};
answer = inputdlg(prompt,name,[1 50],defaultans);
folders =str2double(answer);

% Get CombinedStats data from user 
dataSet=cell(folders,1);
for r=1:folders
    
    [file,path] = uigetfile('*.mat',...
                            'Select a CombinedStats file',...
                            'MultiSelect','off');
    if file==0,return,end
    
    dataSet{r}=load([path filesep file]);

end 

%% Initialzie Variables

% Each row of xVal contains the x-Axis position for the 4 diffusion states:
% immobile / confined / free / super. Currently 4 rows allow to plot four 
% datasets in each panel 
xVal=[-0.15:2.85;... % dataset 1
      -0.05:2.95;... % dataset 2
       0.05:3.05;... % dataset 3
       0.15:3.15];   % dataset 4

% Dot size and color maps
dotSize     = 75;
dotColor    = [0.0,   0.0,   0.0;  % black
               1.0,   0.0,   0.0;  % red
               0.0,   0.0,   1.0;  % blue 
               0.0,   1.0,   0.0]; % green

errBarColor = {'k+',... % black cross
               'r+',... % red cross
               'b+',... % blue cross
               'g+'};   % green cross
      
% Conversion factors and sampling rate
pSizenm = 160;   % Pixel Size in nm
pSizeum = 0.16;  % Pixel Size in uM
fTime   = 0.040; % acquisition time in seconds

%% Get fractions of the diffusion states and the diffusion coefficients

idxClass=cell(4,4);
for n=1:folders
    if ~isempty(dataSet{n,1}.CombinedStats)
        
        % Find fractions of immobile / confined / free / super states
        idxClass{n,1}=dataSet{n,1}.CombinedStats(:,1)==0;
        idxClass{n,2}=dataSet{n,1}.CombinedStats(:,1)==1;
        idxClass{n,3}=dataSet{n,1}.CombinedStats(:,1)==2;
        idxClass{n,4}=dataSet{n,1}.CombinedStats(:,1)==3;
        
        % Get diffusion coefficients and convert units
        dataSet{n,1}.CombinedStats(:,13) =...
            (dataSet{n,1}.CombinedStats(:,11).*(pSizenm));
        dataSet{n,1}.CombinedStats(:,14) =...
            (dataSet{n,1}.CombinedStats(:,8).*(pSizeum^2))./fTime;
        dataSet{n,1}.CombinedStats(:,15) =...
            (dataSet{n,1}.CombinedStats(:,6).*(fTime));
    end
end

%% Plot occurence (fraction) for each diffusion state 
figure;
subplot(2,2,1)
fraction=struct([]);
for n=1:folders
    if ~isempty(dataSet{n,1}.CombinedStats)
        
        % Plot Fractions
        
        % immobile
        fraction(n).imbX = dataSet{n,1}.CombinedStats(idxClass{n,1},1)+xVal(n,1);
        fraction(n).imbY = dataSet{n,1}.CombinedStats(idxClass{n,1},5);
        
        scatter( fraction(n).imbX, fraction(n).imbY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:)); hold on;
             
        % Confined
        fraction(n).cnfX = dataSet{n,1}.CombinedStats(idxClass{n,2},1)+xVal(n,1);
        fraction(n).cnfY = dataSet{n,1}.CombinedStats(idxClass{n,2},5);
        
        scatter(fraction(n).cnfX, fraction(n).cnfY,... 
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
        
        % Free
        fraction(n).freX = dataSet{n,1}.CombinedStats(idxClass{n,3},1)+xVal(n,1);
        fraction(n).freY = dataSet{n,1}.CombinedStats(idxClass{n,3},5);
        
        scatter( fraction(n).freX, fraction(n).freY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
             
        % Super
        fraction(n).sprX = dataSet{n,1}.CombinedStats(idxClass{n,4},1)+xVal(n,1);
        fraction(n).sprY = dataSet{n,1}.CombinedStats(idxClass{n,4},5);
        
        scatter(fraction(n).sprX, fraction(n).sprY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
             
        % Plot Errorbar
        avgVal    = [nanmean(fraction(n).imbY)...
                     nanmean(fraction(n).cnfY)...
                     nanmean(fraction(n).freY)...
                     nanmean(fraction(n).sprY)];

        stdVal    = [nanstd(fraction(n).imbY)...
                     nanstd(fraction(n).cnfY)...
                     nanstd(fraction(n).freY)...
                     nanstd(fraction(n).sprY)];
        yVal      =  avgVal;
        lenErrBar =  stdVal;
        errorbar(xVal(n,:),yVal,lenErrBar,...
                errBarColor{n},...
                'LineWidth',1,...
                'Markersize',4);
     end

end

% Axis lables 
xlim([-1 4]);
ylim([-0.1 1.1]);
set(gca,'XTick',0:3);
set(gca,'XTickLabel',{'Immobile','Confined','Free','Super'},'FontSize',8);
title('Total Fraction Of Time Spent In Diffusion State');
ylabel('Occurrence %');
grid on;


%% Plot mean diffusion coeffcient for each diffusion state 
subplot(2,2,2);
diffusion=struct([]);

for n=1:folders
    if ~isempty(dataSet{n,1}.CombinedStats)

        % Plot diffusion coefficients
        
        % immobile
        diffusion(n).imbX = dataSet{n,1}.CombinedStats(idxClass{n,1},1)+xVal(n,1);
        diffusion(n).imbY = dataSet{n,1}.CombinedStats(idxClass{n,1},14);
        
        scatter(diffusion(n).imbX, diffusion(n).imbY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:)); hold on
             
        % confined
        diffusion(n).cnfX = dataSet{n,1}.CombinedStats(idxClass{n,2},1)+xVal(n,1);
        diffusion(n).cnfY = dataSet{n,1}.CombinedStats(idxClass{n,2},14);
        
        scatter(diffusion(n).cnfX, diffusion(n).cnfY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
        
        % free
        diffusion(n).freX = dataSet{n,1}.CombinedStats(idxClass{n,3},1)+xVal(n,1);
        diffusion(n).freY = dataSet{n,1}.CombinedStats(idxClass{n,3},14);
        
        scatter(diffusion(n).freX ,diffusion(n).freY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
             
        % super
        diffusion(n).sprX = dataSet{n,1}.CombinedStats(idxClass{n,4},1)+xVal(n,1);
        diffusion(n).sprY = dataSet{n,1}.CombinedStats(idxClass{n,4},14);
        
        scatter(diffusion(n).sprX ,diffusion(n).sprY,... 
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));

        % Plot errorbars
        avgVal    = [nanmean(diffusion(n).imbY)...
                     nanmean(diffusion(n).cnfY)...
                     nanmean(diffusion(n).freY)...
                     nanmean(diffusion(n).sprY)];
        stdVal    = [nanstd(diffusion(n).imbY)...
                     nanstd(diffusion(n).cnfY)...
                     nanstd(diffusion(n).freY)...
                     nanstd(diffusion(n).sprY)];
        yVal      =  avgVal;
        lenErrBar =  stdVal;
        errorbar(xVal(n,:),yVal,lenErrBar,...
                errBarColor{n},...
                'LineWidth',1,...
                'Markersize',4);

    end
end

% Axis lables 
xlim([-1 4])  
ylim([-0.025 0.3])
set(gca,'XTick',0:3)
set(gca,'XTickLabel',{'Immobile','Confined','Free','Super'},'FontSize',8)
title('Mean Diffusion Coefficient')
ylabel('um/sec.');
grid on;


%% Mean confinement zones for the immobile and confined state
subplot(2,2,3)

confinment=struct([]);

for n=1:folders
    if ~isempty(dataSet{n,1})

        % Plot confined zones of immobile and confined states
        
        % immobile
        confinment(n).imbX = dataSet{n,1}.CombinedStats(idxClass{n,1},1)+xVal(n,1);
        confinment(n).imbY = dataSet{n,1}.CombinedStats(idxClass{n,1},13);
        
        scatter( confinment(n).imbX, confinment(n).imbY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));hold on
             
        % confined     
        confinment(n).cnfX = dataSet{n,1}.CombinedStats(idxClass{n,2},1)+xVal(n,1);
        confinment(n).cnfY = dataSet{n,1}.CombinedStats(idxClass{n,2},13);
        
        scatter(confinment(n).cnfX, confinment(n).cnfY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));

        % Plot errorbars
        avgVal = [nanmean(confinment(n).imbY)...
                  nanmean(confinment(n).cnfY)];
        stdVal = [nanstd(confinment(n).imbY)...
                  nanstd(confinment(n).cnfY)];
        yVal      =  avgVal;
        lenErrBar =  stdVal;
        errorbar(xVal(n,1:2),yVal,lenErrBar,...
                errBarColor{n},...
                'LineWidth',1,...
                'Markersize',4);
    end
end

xlim([-0.5 1.5])
ylim([0 350])
set(gca,'XTick',0:1)
set(gca,'XTickLabel',{'Immobile','Confined'},'FontSize',8)
title('Confinement Radii ')
ylabel('nm');
grid on;


%% Median lifetime for each diffusion state 
subplot(2,2,4)

lifetime=struct([]);

for n=1:folders
    if ~isempty(dataSet{n,1})
        
        % Plot median lifetime
        
        % immobile
        lifetime(n).imbX = dataSet{n,1}.CombinedStats(idxClass{n,1},1)+xVal(n,1);
        lifetime(n).imbY = dataSet{n,1}.CombinedStats(idxClass{n,1},15);
        
        scatter(lifetime(n).imbX, lifetime(n).imbY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:)); hold on
        
        % confined
        lifetime(n).cnfX = dataSet{n,1}.CombinedStats(idxClass{n,2},1)+xVal(n,1);      
        lifetime(n).cnfY = dataSet{n,1}.CombinedStats(idxClass{n,2},15);   
             
        scatter(lifetime(n).cnfX, lifetime(n).cnfY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
             
        % free
        lifetime(n).freX = dataSet{n,1}.CombinedStats(idxClass{n,3},1)+xVal(n,1);
        lifetime(n).freY = dataSet{n,1}.CombinedStats(idxClass{n,3},15);
        
        scatter(lifetime(n).freX, lifetime(n).freY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
             
        % super
        lifetime(n).sprX = dataSet{n,1}.CombinedStats(idxClass{n,4},1)+xVal(n,1);
        lifetime(n).sprY = dataSet{n,1}.CombinedStats(idxClass{n,4},15); 
        
        scatter(lifetime(n).sprX, lifetime(n).sprY,...
                 dotSize,'.','MarkerEdgeColor',dotColor(n,:));
             
        % Plot errorbars
        avgVal = [nanmean(lifetime(n).imbY)...
                  nanmean(lifetime(n).cnfY)...
                  nanmean(lifetime(n).freY)...
                  nanmean(lifetime(n).sprY)];
        stdVal = [nanstd(lifetime(n).imbY)...
                  nanstd(lifetime(n).cnfY)...
                  nanstd(lifetime(n).freY)...
                  nanstd(lifetime(n).sprY)];
        yVal      =  avgVal;
        lenErrBar =  stdVal;
        errorbar(xVal(n,:),yVal,lenErrBar,...
                errBarColor{n},...
                'LineWidth',1,...
                'Markersize',4);
    end
end

xlim([-1 4])
ylim([-0.5 30])
set(gca,'XTick',0:3)
set(gca,'XTickLabel',{'Immobile','Confined','Free','Super'},'FontSize',8)
title('Median Lifetime')
ylabel('sec.');
grid on;

%% Clear Variables 
clearvars -except fraction diffusion confinment lifetime

%% End

