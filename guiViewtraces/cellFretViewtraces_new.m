function varargout = cellFretViewtraces(varargin)
%--------------------------------------------------------------------------
%
% cellFretViewtraces:
%   Graphical user interface (GUI) for manual inspection of single molecule 
%   tracks, intensity time traces and FRET time traces. 
% 
% Description:
%   The program cellFretViewtraces displays the motion of individual 
%   donor-acceptor-labeled molecules, their tracks with their
%   corresponding intensity and FRET time traces and allows the user to
%   manually correct and sort traces into the three different categories.   
% 
% Syntax:  
%   cellFretViewtraces 
% 
% Inputs:
%   The program accepts any of the following input files:
%   1. fretTraces.mat file - Raw FRET-traces file generated by 
%      scriptGetFretTraces.m  
%   2. fretTracesPst.mat file - Filtered Fret-traces file generated by
%      scriptFretFilter.m
%   3. fretTracesDif.mat file - Fret-traces file containing FRET data 
%      linked to diffusion data. The file is generated by 
%      scriptDiff2Frettraces.m.
%   4. If traces were sorted previously select either 
%      fretTraces*_bestFret.mat, fretTraces*_allFret.mat or
%      fretTraces*_noFret.mat
% 
% Outputs:
%   Traces can be manually distributed into the three different bins by use 
%   of the checkboxes. Bin Names are arbitrary and can be used to create
%   subpopulations of FRET traces. In general, the three categories are 
%   used as follows: 
%   1. fretTraces*_bestFret.mat - Fret traces which show anticorrelation of 
%      the donor and acceptor signal at any point of time and at the end of 
%      the trace. 
%   2. fretTraces*_allFret.mat - Fret traces which show anticorrelation at
%      any point of time. 
%   3. fretTraces*_noFret.mat - Fret traces that show significant artifacts 
%      and are not useful for further analysis.
%
% 
% See also: 
%   scriptGetFretTraces.m,  scriptFretFilter.m, scriptDiff2Frettraces.m
%
% Authors: 
%   - P.G. 2011 - 2020
%   - P.G. Sep 2020, Added features to extract donor and acceptor 
%     intensities directly from trace data.    
%
% Copyright:
%    2011-2020 Columbia Univiversity / RFMH All Rights Reserved.
%
% -------------------------------------------------------------------------


% CELLFRETVIEWTRACES M-file for cellFretViewtraces.fig
%      CELLFRETVIEWTRACES, by itself, creates a new CELLFRETVIEWTRACES or raises the existing
%      singleton*.
%
%      H = CELLFRETVIEWTRACES returns the handle to a new CELLFRETVIEWTRACES or the handle to
%      the existing singleton*.
%
%      CELLFRETVIEWTRACES('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in CELLFRETVIEWTRACES.M with the given input arguments.
%
%      CELLFRETVIEWTRACES('Property','Value',...) creates a new CELLFRETVIEWTRACES or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before cellFretViewtraces_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to cellFretViewtraces_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help cellFretViewtraces

% Last Modified by GUIDE v2.5 09-Jun-2020 10:26:38

% Begin initialization code - DO NOT EDIT



gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @cellFretViewtraces_OpeningFcn, ...
                   'gui_OutputFcn',  @cellFretViewtraces_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT



%=========================================================================%
%======================     INITIALIZATION          ======================%
%=========================================================================%

% --- Executes just before cellFretViewtraces is made visible.
function cellFretViewtraces_OpeningFcn(hObject, eventdata, handles, varargin)
% Setup GUI controls in their default state (no file loaded).


% Initialize GUI if cellFretViewtraces is being launched for the first time.
if ~isfield(handles,'smCellconstants')

    handles.output = hObject; 

    %---- Initialize some variables

    constants = smCellConstants('');
    config.dualview      = 0; % dual channel mode off
    config.overlayTraces = 0; % overlay off
    config.channel       = 1;
    config.zoomIm        = 0;
    config.zoomHold      = 0;
    config.zoomFact      = 25;
    config.showTracking  = 0;
    config.Ch1.lenBgd    = constants.lenBaseline;
    config.TAU           = constants.TAU;  % median filter window size (PB detection).
    config.NSTD          = constants.NSTD; % PB detection threshold
    config.dimerThresh   = constants.dimerThresh;
    config.minStepSize   = constants.minStepSize;
    config.nStdJumps     = constants.nStdJumps;
    config.pixelSize     = constants.pixelSize;
    config.lenBackset    = constants.lenBackset;
    config.diffMode      = 4;
    handles.config       = config;
    
    % Link x-axes - zooming on one plot will automatically zoom on the other
    linkaxes([handles.axFluor handles.axTotal handles.axFret],'x');
    
    % Initialize Threshold sliders
    set(handles.sldCrosstalk, 'Value',  0);
    set(handles.sldThreshold, 'Value',  100);
    set(handles.edCrosstalk,  'String', '0');
  
    % Initialize axes
    cla(handles.axImageCh1);
    cla(handles.axImageCh2);
    cla(handles.axXYtrace);
    ylabel(handles.axXYtrace,'y [Pixels]');
    xlabel(handles.axXYtrace,'x [Pixels]');
    hold( handles.axXYtrace, 'on' );
    
    cla(handles.axFluor);
    ylabel( handles.axFluor, 'Fluorescence' );
    grid( handles.axFluor, 'on' );
    zoom( handles.axFluor, 'on' );
    hold( handles.axFluor, 'on' );
    
    cla(handles.axTotal);
    ylabel( handles.axTotal, 'Total Fluorescence' );
    grid( handles.axTotal, 'on' );
    zoom( handles.axTotal, 'on' );
    hold( handles.axTotal, 'on' );
    
    cla(handles.axFret);
    xlabel( handles.axFret, 'Time [s]' );
    ylabel( handles.axFret, 'FRET Efficiency' );
    ylim( handles.axFret, [-0.1 1] );
    grid( handles.axFret, 'on' );
    zoom( handles.axFret, 'on' );
    hold( handles.axFret, 'on' );

    % Initialize Controls
    set(handles.popDataType,'Enable','on');
    set(handles.editIdCh1,'Enable','off');
    set(handles.editIdCh1,'String',num2str(0));
    set(handles.editIdCh2,'Enable','off');
    set(handles.editIdCh2,'String',num2str(0));
    set(handles.editGoTo,'Enable','off','String',num2str(0));

    % Initialize Sorting Molecules
    set(handles.btnNext,'Enable','off');
    set(handles.btnPrev,'Enable','off');
    set(handles.editBin3,'Enable','off');
    set(handles.editBin3,'String', num2str(0));
    set(handles.editBin3,'Enable','off');
    set(handles.editBin3,'String', num2str(0));
    set(handles.chkBin3,'Enable','off', 'Value', 0);
    set(handles.chkBin3,'Enable','off', 'Value', 0);

    % Initialize Zoom
    set(handles.btnZoomToMolecule,'Enable','off','Value',0);
    set(handles.btnZoomToRegion,'Enable','off','Value',0);
    set(handles.editLwXLim,'Enable','off','String', num2str(0));
    set(handles.editUpXLim,'Enable','off','String', num2str(0));
    set(handles.editLwYLim,'Enable','off','String', num2str(0));
    set(handles.editUpYLim,'Enable','off','String', num2str(0));
    
    set(handles.btnZoomHold,'Enable','off','Value',0);
    handles.zoomFactor=0;
    set(handles.editZoomFact,'Enable','off',...
       'String',num2str(handles.zoomFactor));
    
    % Initialize Tracking
    set(handles.btnShowTracking,'Enable','off','Value',0);
    set(handles.sldTrackFeature,'Enable','off');
    set(handles.editTrackFeature,'Enable','off');
    
    % Initialize Resizing
    handles.roiData=[];
end

linkaxes([handles.axImageCh1,handles.axImageCh2],'xy');
% Update handles structure( store and maintain the handels structure)
guidata(hObject, handles);

%--- END FUNCTIN sorttraces_OpeningFcn



% --- Outputs from this function are returned to the command line.
function varargout = cellFretViewtraces_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;

%--- END FUNCTION sorttraces_OutputFcn

%=========================================================================%
%====================== CONFIGURATION FIELD HANDLING  ====================%
%=========================================================================%

% --- Executes on button press in bttnDualChannel.
function bttnDualChannel_Callback(hObject, eventdata, handles)
% hObject    handle to bttnDualChannel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Hint: get(hObject,'Value') returns toggle state of bttnOverlayTraces
handles.config.dualview = get(hObject,'Value');
guidata(hObject,handles);


%=========================================================================%
%======================   EDIT DATA TYPE            ======================%
%=========================================================================%
% --- Executes on selection change in popDataType.
function popDataType_Callback(hObject, eventdata, handles)
% hObject    handle to popDataType (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

handles.dataType=cellstr(get(hObject,'String'));

% Re-Initialize background color for Load Btn 
set(handles.btnLoadTraces,'BackgroundColor',[0.9,0.9,0.9]);

% Initialize Threshold sliders
set(handles.sldCrosstalk, 'Value',  0);
set(handles.sldThreshold, 'Value',  100);
set(handles.edCrosstalk,  'String', '0');

% Initialize axes
cla(handles.axImageCh1);
cla(handles.axImageCh2);
cla(handles.axXYtrace);
ylabel(handles.axXYtrace,'y [Pixels]');
xlabel(handles.axXYtrace,'x [Pixels]');
hold( handles.axXYtrace, 'on' );

cla(handles.axFluor);
ylabel( handles.axFluor, 'Fluorescence' );
grid( handles.axFluor, 'on' );
zoom( handles.axFluor, 'on' );
hold( handles.axFluor, 'on' );

cla(handles.axTotal);
ylabel( handles.axTotal, 'Total Fluorescence' );
grid( handles.axTotal, 'on' );
zoom( handles.axTotal, 'on' );
hold( handles.axTotal, 'on' );

cla(handles.axFret);
xlabel( handles.axFret, 'Time [s]' );
ylabel( handles.axFret, 'FRET Efficiency' );
ylim( handles.axFret, [-0.1 1] );
grid( handles.axFret, 'on' );
zoom( handles.axFret, 'on' );
hold( handles.axFret, 'on' );

% Initialize Controls
set(handles.popDataType,'Enable','on');
set(handles.editIdCh1,'Enable','off');
set(handles.editIdCh1,'String',num2str(0));
set(handles.editIdCh2,'Enable','off');
set(handles.editIdCh2,'String',num2str(0));
set(handles.editGoTo,'Enable','off','String',num2str(0));

% Initialize Bgd Correction buttons
set(handles.btnAccBgd,'Enable','off');
set(handles.btnDonBgd,'Enable','off');
set(handles.btnSubBoth,'Enable','off');
set(handles.btnSubUndo,'Enable','off');
set(handles.btnRmFretBgd,'Enable','off');
set(handles.btnUndoRmFretBgd,'Enable','off'); 
set(handles.btnGetDataAcc,'Enable','off');
set(handles.btnGetDataDon,'Enable','off');
set(handles.btnClearData,'Enable','off');

% Turn off other slider controls that can now be used
set(handles.edThreshold, 'Enable','off' );
set(handles.sldThreshold,'Enable','off' );
set(handles.edCrosstalk, 'Enable','off' );

% Initialize Sorting Molecules
set(handles.btnNext,'Enable','off');
set(handles.btnPrev,'Enable','off');
set(handles.editBin1,'Enable','off');
set(handles.editBin1,'String', num2str(0));
set(handles.editBin2,'Enable','off');
set(handles.editBin2,'String', num2str(0));
set(handles.editBin3,'Enable','off');
set(handles.editBin3,'String', num2str(0));
set(handles.chkBin1,'Enable','off', 'Value', 0);
set(handles.chkBin2,'Enable','off', 'Value', 0);
set(handles.chkBin3,'Enable','off', 'Value', 0);
set(handles.btnSelAll1,'Enable','off');
set(handles.btnSelAll2,'Enable','off');
set(handles.btnSelAll3,'Enable','off');

% Initialize Tracking
set(handles.btnShowTracking,'Enable','off','Value',0);
set(handles.sldTrackFeature,'Enable','off');
set(handles.editTrackFeature,'Enable','off');

% Initialize Tracking and Zoom
set(handles.btnZoomToMolecule,'Enable','off','Value',0);
set(handles.btnZoomToRegion,'Enable','off','Value',0);
set(handles.editLwXLim,'Enable','off','String', num2str(0));
set(handles.editUpXLim,'Enable','off','String', num2str(0));
set(handles.editLwYLim,'Enable','off','String', num2str(0));
set(handles.editUpYLim,'Enable','off','String', num2str(0));
set(handles.btnZoomHold,'Enable','off','Value',0);
handles.zoomFactor=0;
set(handles.editZoomFact,'Enable','off',...
    'String',num2str(handles.zoomFactor));

% % Initialize Segment Analysis
% handles.sgm_no = 0;

% Initialize Resizing
handles.roiData=[];

% First Image
handles.startIm = 1;

% --- Executes during object creation, after setting all properties.
function popDataType_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popDataType (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%=========================================================================%
%======================      LOAD 1st Image         ======================%
%=========================================================================%

% --- Executes on button press in btnSelectTracesFile.
function btnSelectTracesFile_Callback(hObject, eventdata, handles)
% hObject    handle to btnSelectTracesFile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% Initialize axes
cla(handles.axImageCh1);
cla(handles.axImageCh2);
cla(handles.axXYtrace);
ylabel(handles.axXYtrace,'y [Pixels]');
xlabel(handles.axXYtrace,'x [Pixels]');
hold( handles.axXYtrace, 'on' );

cla(handles.axFluor);
ylabel( handles.axFluor, 'Fluorescence' );
grid( handles.axFluor, 'on' );
zoom( handles.axFluor, 'on' );
hold( handles.axFluor, 'on' );

cla(handles.axTotal);
ylabel( handles.axTotal, 'Total Fluorescence' );
grid( handles.axTotal, 'on' );
zoom( handles.axTotal, 'on' );
hold( handles.axTotal, 'on' );

cla(handles.axFret);
xlabel( handles.axFret, 'Time [s]' );
ylabel( handles.axFret, 'FRET Efficiency' );
ylim( handles.axFret, [-0.1 1] );
grid( handles.axFret, 'on' );
zoom( handles.axFret, 'on' );
hold( handles.axFret, 'on' );

% Initialize Controls
set(handles.popDataType,'Enable','on');
set(handles.editIdCh1,'Enable','off');
set(handles.editIdCh1,'String',num2str(0));
set(handles.editIdCh2,'Enable','off');
set(handles.editIdCh2,'String',num2str(0));
set(handles.editGoTo,'Enable','off','String',num2str(0));

% Initialize Bgd Correction buttons
set(handles.btnAccBgd,'Enable','off');
set(handles.btnDonBgd,'Enable','off');
set(handles.btnSubBoth,'Enable','off');
set(handles.btnSubUndo,'Enable','off');
set(handles.btnRmFretBgd,'Enable','off');
set(handles.btnUndoRmFretBgd,'Enable','off'); 
set(handles.btnGetDataAcc,'Enable','off');
set(handles.btnGetDataDon,'Enable','off');
set(handles.btnClearData,'Enable','off');

% Turn off other slider controls that can now be used
set(handles.edThreshold, 'Enable','off' );
set(handles.sldThreshold,'Enable','off' );
set(handles.edCrosstalk, 'Enable','off' );

% Initialize Sorting Molecules
set(handles.btnNext,'Enable','off');
set(handles.btnPrev,'Enable','off');
set(handles.editBin1,'Enable','off');
set(handles.editBin1,'String', num2str(0));
set(handles.editBin2,'Enable','off');
set(handles.editBin2,'String', num2str(0));
set(handles.editBin3,'Enable','off');
set(handles.editBin3,'String', num2str(0));
set(handles.chkBin1,'Enable','off', 'Value', 0);
set(handles.chkBin2,'Enable','off', 'Value', 0);
set(handles.chkBin3,'Enable','off', 'Value', 0);
set(handles.btnSelAll1,'Enable','off');
set(handles.btnSelAll2,'Enable','off');
set(handles.btnSelAll3,'Enable','off');

% Initialize Tracking
set(handles.btnShowTracking,'Enable','off','Value',0);
set(handles.sldTrackFeature,'Enable','off');
set(handles.editTrackFeature,'Enable','off');

% Initialize Tracking and Zoom
set(handles.btnZoomToMolecule,'Enable','off','Value',0);
set(handles.btnZoomToRegion,'Enable','off','Value',0);
set(handles.editLwXLim,'Enable','off','String', num2str(0));
set(handles.editUpXLim,'Enable','off','String', num2str(0));
set(handles.editLwYLim,'Enable','off','String', num2str(0));
set(handles.editUpYLim,'Enable','off','String', num2str(0));
set(handles.btnZoomHold,'Enable','off','Value',0);
handles.zoomFactor=0;
set(handles.editZoomFact,'Enable','off',...
    'String',num2str(handles.zoomFactor));

% Initialize Resizing
handles.roiData=[];

% fist Image
handles.startIm = 1;

% Select data type
dataType={'fretTraces';...
          'fretTraces_bestFret';...
          'fretTraces_allFret';...
          'fretTraces_noFret'};
handles.format   = get(handles.popDataType,'Value');
handles.dataType = dataType{handles.format};
handles.pstFile  = false;

% Get traces filename by menu driven input
[handles.datafile,handles.datapath]= uigetfile({'*.mat'},...
    'Choose a traces file');
if handles.datafile==0; return;end
pathSeg=textscan(handles.datapath,'%s %s %s','delimiter','#');
if isempty(pathSeg{3})
    warning('no "ImageData" directory');
    return
end
channelName=textscan(char(pathSeg{3}),'%*d %*d %d','delimiter','Ch');
if channelName{1}==1
    handles.datapathCh1=handles.datapath;
    handles.datapathCh2=strrep(handles.datapath,'Ch1','Ch2');
elseif channelName{1}==2
    handles.datapathCh2=handles.datapath;
    handles.datapathCh1=strrep(handles.datapath,'Ch2','Ch1');
end

if handles.datafile==0, return; end
handles.filename=[handles.datapath handles.datafile];
guidata(hObject, handles);

% Check File Format 
[~,fName]=fileparts(handles.filename);

switch handles.dataType
    case 'fretTraces' 
        if contains(fName,'fretTraces') && ~endsWith(fName,'Fret')
            set(handles.btnSelectTracesFile,'BackgroundColor',[.9 .9 .9]);
        else
            disp('Select correct data format');
            set(handles.btnSelectTracesFile,'BackgroundColor','r');
            return
        end
    case 'fretTraces_bestFret'
        if contains(fName,'fretTraces') && endsWith(fName,'bestFret')
            set(handles.btnSelectTracesFile,'BackgroundColor',[.9 .9 .9]);
        else
            disp('Select correct data format');
            set(handles.btnSelectTracesFile,'BackgroundColor','r');
            return
        end
        
    case 'fretTraces_allFret'
        if contains(fName,'fretTraces') && endsWith(fName,'allFret')
            set(handles.btnSelectTracesFile,'BackgroundColor',[.9 .9 .9]);
        else
            disp('Select correct data format');
            set(handles.btnSelectTracesFile,'BackgroundColor','r');
            return
        end
    
    case 'fretTraces_noFret'
        if contains(fName,'fretTraces') && endsWith(fName,'noFret')
            set(handles.btnSelectTracesFile,'BackgroundColor',[.9 .9 .9]);
        else
            disp('Select correct data format');
            set(handles.btnSelectTracesFile,'BackgroundColor','r');
            return
        end
    
end
    
%Load first image in Ch1
fnameCh1=[handles.datapathCh1 'ImageData\fov1_' num2str(handles.startIm,...
    '%05i') '.tif'];
handles.tmpImCh1=imread(fnameCh1);
handles.intRange.Ch1=stretchlim(handles.tmpImCh1);
info=imfinfo(fnameCh1);
imsize=[info.Width info.Height];
image(handles.tmpImCh1,'Parent',handles.axImageCh1);
axis(handles.axImageCh1,[0 imsize(1,1) 0 imsize(1,2)]);

%Axis properties Ch1
ylabel(handles.axImageCh1,'y [Pixels]');
xlabel(handles.axImageCh1,'x [Pixels]');
title(handles.axImageCh1,'Ch1 ');

%Load first image in Ch2
fnameCh2=[handles.datapathCh2 'ImageData\fov1_' num2str(handles.startIm,...
    '%05i') '.tif'];
handles.tmpImCh2=imread(fnameCh2);
handles.intRange.Ch2=stretchlim(handles.tmpImCh2);
image(handles.tmpImCh2,'Parent',handles.axImageCh2);
axis(handles.axImageCh2,[0 imsize(1,1) 0 imsize(1,2)]);
%Axis properties Ch2
set(handles.axImageCh2, 'YTick', []);
xlabel(handles.axImageCh2,'x [Pixels]');
title(handles.axImageCh2,'Ch2 ');

% Initialize intensity slider for Ch1
sldRangeCh1=[-10 10];
stepSize1Ch1 = 0.05;
stepSize2Ch1 = 2*stepSize1Ch1;
set(handles.sliderIntCh1,'Min',sldRangeCh1(1),'Max',sldRangeCh1(2),...
    'Value',mean(sldRangeCh1),'SliderStep',[stepSize1Ch1,stepSize2Ch1]);

% Initialize intensity slider for Ch2
sldRangeCh2=[-10 10];
stepSize1Ch2 = 0.05;
stepSize2Ch2 = 2*stepSize1Ch2;
set(handles.sliderIntCh2,'Min',sldRangeCh2(1),'Max',sldRangeCh2(2),...
    'Value',mean(sldRangeCh2),'SliderStep',[stepSize1Ch2,stepSize2Ch2]);

% Initialize Crosstalk Slider
sldRangeCRT=[-10 10];
stepSize1CRT = 0.0005;
stepSize2CRT = 2*stepSize1CRT;
set(handles.sldCrosstalk,... 
    'Min',sldRangeCRT(1),...
    'Max',sldRangeCRT(2),...
    'Value',0,...
    'SliderStep',[stepSize1CRT,stepSize2CRT]);
set(handles.edCrosstalk,  'String', '0');

% Initialize Total Threshold slider
sldRangeTotal=[0 2000];
stepSize1Total = 0.01;
stepSize2Total = 3*stepSize1Total;
set(handles.sldThreshold,... 
    'Min',sldRangeTotal(1),...
    'Max',sldRangeTotal(2),...
    'Value',10,...
    'SliderStep',[stepSize1Total,stepSize2Total]);
set(handles.edThreshold,  'String', '10');

% Get image size and update handles structure
handles.imsize=imsize;
guidata(hObject, handles);

%=========================================================================%
%======================      Image Processing       ======================%
%=========================================================================%

% --- Executes on slider movement.
function sliderIntCh1_Callback(hObject, eventdata, handles)
% hObject    handle to sliderIntCh1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer=get(hObject,'Value');
set(handles.sliderIntCh1,'Value',answer);
intRangeCh1=stretchlim(handles.tmpImCh1);
lwLim = intRangeCh1(1);
upLim = intRangeCh1(2)+answer*0.0001;
tmpImCh1=imadjust(handles.tmpImCh1,[lwLim upLim],[0 1]);
image(tmpImCh1,'CDataMapping','scaled','Parent',handles.axImageCh1);
% Axis properties Ch1
colormap (gray);
ylabel(handles.axImageCh1,'y [Pixels]');
xlabel(handles.axImageCh1,'x [Pixels]');
title(handles.axImageCh1,'Ch1 ');
% Update handles structure
handles.intRange.Ch1 = [lwLim upLim];
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function sliderIntCh1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to sliderIntCh1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on slider movement.
function sliderIntCh2_Callback(hObject, eventdata, handles)
% hObject    handle to sliderIntCh2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer=get(hObject,'Value');
set(handles.sliderIntCh2,'Value',answer);
intRangeCh2=stretchlim(handles.tmpImCh2);
lwLim = intRangeCh2(1);
upLim = intRangeCh2(2)+answer*0.0001;
tmpImCh2=imadjust(handles.tmpImCh2,[lwLim upLim],[0 1]);
image(tmpImCh2,'CDataMapping','scaled','Parent',handles.axImageCh2);
% Axis properties Ch1
colormap (gray);
set(handles.axImageCh2, 'YTick', []);
xlabel(handles.axImageCh2,'x [Pixels]');
title(handles.axImageCh2,'Ch2');
% Update handles structure
handles.intRange.Ch2 = [lwLim upLim];
guidata(hObject, handles);


% --- Executes during object creation, after setting all properties.
function sliderIntCh2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to sliderIntCh2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


%=========================================================================%
%======================      Load Traces            ======================%
%=========================================================================%

% --- Executes on button press in btnLoadTraces.
function btnLoadTraces_Callback(hObject, eventdata, handles) %#ok<DEFNU>
% hObject    handle to btnLoadTraces (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Load data
load(handles.filename);
if isempty(fretTraces.Ch1.x) 
    warning('data set is empty');
    return
end

% Clear the original stack to save memory
if isappdata(handles.figure1,'stkData')
    rmappdata(handles.figure1,'stkData');
end

accData=struct([]);
donData=struct([]);
assignin('base','accData',accData);
assignin('base','donData',donData);

% Treat format 2,3,4 similar
if handles.format==3 ||  handles.format==4; handles.format=2;end

% Determine number of channels
handles.nChannels = 2;

switch handles.format 
    case 1 %Load fretTraces.mat
        stkData = fretTraces;
        reloadSelection=1;
    
    case 2 %Load fretTraces_*.mat
        stkData = fretTraces;
        reloadSelection=0;
end

% Read image data
imFiles.Ch1 = handles.datapathCh1;
imFiles.Ch2 = handles.datapathCh2;
for c=1:handles.nChannels
    fn2=['Ch' num2str(c)];
    stkData.(fn2).im     = images2Mat(imFiles.(fn2), handles.roiData, ...
                           handles.intRange.(fn2)); 
end

% Set value for nTraces and length of traces
[handles.Ntraces,handles.nFrames] = size(stkData.(fn2).x);
        
% Make sure time axis is in seconds (not frames)
if stkData.(fn2).time(1)==1
    f = inputdlg('What is the sampling interval (in s) for this data?');
    sampling = str2double(f);
    stkData.(fn2).time = sampling.*(0:handles.nFrames-1);
end
    
% Definition of time interval
handles.molecule_no = 1;
handles.dt = stkData.(fn2).time(2)-stkData.(fn2).time(1);

% Enable Gui Buttons
set(handles.editGoTo,'Enable','on','String',num2str(handles.molecule_no));
set(handles.btnNext,'Enable','on');
set(handles.btnPrev,'Enable','on');
set(handles.btnZoomToMolecule,'Enable','on','Value',0);
set(handles.btnZoomToRegion,'Enable','on','Value',0);
set(handles.editLwXLim,'Enable','off','String', num2str(0));
set(handles.editUpXLim,'Enable','off','String', num2str(0));
set(handles.editLwYLim,'Enable','off','String', num2str(0));
set(handles.editUpYLim,'Enable','off','String', num2str(0));
set(handles.btnShowTracking,'Enable','on','Value',0);
    
%Initialze time interval for tracking slider
mol=handles.molecule_no;
nameCh={'Ch1';'Ch2'};
Tmin=zeros(1,handles.nChannels);   
Tmax=zeros(1,handles.nChannels);

for n=1:handles.nChannels
    Ch=nameCh{n};
    lenBackset.(Ch)   = stkData.(Ch).traceMetadata(mol).lenBackset;
    startOfTrace.(Ch) = stkData.(Ch).traceMetadata(mol).startOfTrace;
    endOfTrace.(Ch)   = stkData.(Ch).traceMetadata(mol).endOfTrace;
    lenBaseline.(Ch)  = stkData.(Ch).traceMetadata(mol).lenBaseline;
    % overall start/end of trace 
    traceStart.(Ch)   = startOfTrace.(Ch) - lenBackset.(Ch);
    traceEnd.(Ch)     = endOfTrace.(Ch)   + lenBaseline.(Ch); 
    % Time data
    T.(Ch)    = stkData.(Ch).time(1,traceStart.(Ch):traceEnd.(Ch));
    Tdat.(Ch) = stkData.(Ch).time(1,startOfTrace.(Ch):endOfTrace.(Ch));
    Tmin(n)   = min(T.(Ch));
    Tmax(n)   = max(T.(Ch));
end
    
%Initialize Tracking
handles.timeStep   = handles.dt;
handles.Tmin       = min(Tmin);%T(1,1);
handles.Tmax       = max(Tmax);%T(1,2);
handles.minImage   = round(handles.Tmin/handles.dt);
handles.maxImage   = round(handles.Tmax/handles.dt);
nImages=round(handles.maxImage-handles.minImage);
set(handles.sldTrackFeature,'Enable','on','Min',handles.minImage,...
    'Max',handles.maxImage,'Value',startOfTrace.Ch1,...
    'SliderStep',[1/nImages,2/nImages]);
set(handles.editTrackFeature,'Enable','on','String',num2str(Tdat.Ch1));    
handles.zoomFactor=0;

% Check for previous molecule picking on the same file
handles.noFret_idx=[];
handles.allFret_idx=[];
handles.bestFret_idx=[];
[p,tracesName] = fileparts( handles.filename );

fName={[p filesep tracesName '_noFret.txt'];...
       [p filesep tracesName '_allFret.txt'];...
       [p filesep tracesName '_bestFret.txt']};
   
files = [exist(fName{1},'file');...
         exist(fName{2},'file');...
         exist(fName{3},'file')];

if  any(files) && reloadSelection==1 
    text = 'These traces have been binned before.  ';
    text = [text 'Reload selections?'];
    answer = questdlg(text, 'Load picking selections?','Yes','No','No');
else
    answer='No';
end

if strcmp(answer,'Yes')
    % noFret 
    if exist(fName{1},'file')
        fid = fopen(fName{1},'r');
    else
        fid=[];
    end
    if ~isempty(fid)
       handles.noFret_idx = str2num( fgetl(fid) ); %#ok<ST2NM>
    end

    % allFret
    if exist(fName{2},'file')
        fid = fopen(fName{2},'r');
    else
        fid=[];
    end
    if ~isempty(fid)
        handles.allFret_idx = str2num( fgetl(fid) ); %#ok<ST2NM>
    end
    
    % bestFret 
    if exist(fName{3},'file')
        fid = fopen(fName{3},'r');
    else
        fid=[];
    end
    if ~isempty(fid)
        handles.bestFret_idx = str2num( fgetl(fid) ); %#ok<ST2NM>
    end
    
    %Update check boxes with settings from previous sorting
    %set(handles.btnSave,'Enable','on');
    set(handles.chkBin1,'Enable','on','Value',...
        any(handles.noFret_idx==mol));
    set(handles.chkBin2,'Enable','on','Value',...
        any(handles.allFret_idx==mol));
    set(handles.chkBin3,'Enable','on','Value',...
        any(handles.bestFret_idx==mol));
    
else
    % Initialize check boxes
    set(handles.chkBin1,'Enable','on', 'Value', 0);
    set(handles.chkBin2,'Enable','on', 'Value', 0);
    set(handles.chkBin3,'Enable','on', 'Value', 0);
end

% Initialize picking boxes
set(handles.btnSelAll1,'Enable','on');
set(handles.btnSelAll2,'Enable','on');
set(handles.btnSelAll3,'Enable','on');
set(handles.editBin1,'Enable','on');
set(handles.editBin1,'String', num2str(numel(handles.noFret_idx)));
set(handles.editBin2,'Enable','on');
set(handles.editBin2,'String', num2str(numel(handles.allFret_idx)));
set(handles.editBin3,'Enable','on');
set(handles.editBin3,'String', num2str(numel(handles.bestFret_idx)));

% Turn on other slider controls that can now be used
set(handles.edThreshold, 'Enable','on' );
set(handles.sldThreshold,'Enable','on' );
set(handles.edCrosstalk, 'Enable','on' );
set(handles.sldCrosstalk,'Enable','on' );
% set(handles.btnTrackStat,'Enable','on');

% Initialize array for tracking FRET donor-blinking threshold value.
% The default value of zero is a marker that the value hasn't been
% calculated yet (but should be using traceStat).
handles.fretThreshold = zeros( handles.Ntraces, 1  );

% Set data correction starting values.
% The crosstalk value here reflects *the correction that has already been
% made* -- the actual data are modified each time
handles.crosstalk = zeros( handles.Ntraces, 1  );

if ~isfield(stkData.Ch1.traceMetadata,'crosstalk')
      [stkData.Ch1.traceMetadata.crosstalk] = deal( zeros(2,2) );
end

% Initialize Bgd Correction buttons
set(handles.btnAccBgd,'Enable','on');
set(handles.btnDonBgd,'Enable','on');
set(handles.btnSubBoth,'Enable','on');
set(handles.btnSubUndo,'Enable','off');
set(handles.btnRmFretBgd,'Enable','on');
set(handles.btnUndoRmFretBgd,'Enable','off');
set(handles.btnGetDataAcc,'Enable','on');
set(handles.btnGetDataDon,'Enable','on');
set(handles.btnClearData,'Enable','on');

% Initialize Diffusion
if isfield(stkData,'Diff')
    set(handles.radiobttnImb,'Enable','on');
    set(handles.radiobttnCnf,'Enable','on');
    set(handles.radiobttnFre,'Enable','on');
    set(handles.radiobttnSpr,'Enable','on');
    set(handles.radiobttnOff,'Enable','on');
    
else
    set(handles.radiobttnImb,'Enable','off');
    set(handles.radiobttnCnf,'Enable','off');
    set(handles.radiobttnFre,'Enable','off');
    set(handles.radiobttnSpr,'Enable','off');
    set(handles.radiobttnOff,'Enable','off');
end

% Since the image stack is very large, it is stored in ApplicationData
% instead of GUIData for memory efficiency
setappdata(handles.figure1,'stkData', stkData);

% Image stack is stored in ApplicationData for memory efficiency
setappdata(handles.figure1,'accData', accData);
setappdata(handles.figure1,'donData', accData);

%Update Handles Structure
guidata(hObject, handles);

% Call the plotter function
plotter(handles);
% END FUNCTION OpenTracesFile


%=========================================================================%
%======================          NAVIGATION         ======================%
%=========================================================================%

function editGoTo_Callback(hObject, ~, handles)
% hObject    handle to editGoToo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Get trace ID from GUI

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');

mol=str2double(get(hObject,'String'));

% If trace ID is invalid, reset it to what it was before.
if isnan(mol) || mol>handles.Ntraces || mol<1
    disp('WARNING in viewtraces: Invalid trace number. Resetting.');
    set( hObject,'String',num2str(handles.molecule_no) );
    return;
else
    handles.molecule_no = mol;
end

% Reset these values for the new trace.
nameCh={'Ch1';'Ch2'};
Tmin=zeros(1,handles.nChannels);   
Tmax=zeros(1,handles.nChannels); 
for n=1:handles.nChannels
    Ch=nameCh{n};
    lenBackset.(Ch)   = stkData.(Ch).traceMetadata(mol).lenBackset;
    startOfTrace.(Ch) = stkData.(Ch).traceMetadata(mol).startOfTrace;
    endOfTrace.(Ch)   = stkData.(Ch).traceMetadata(mol).endOfTrace;
    lenBaseline.(Ch)  = stkData.(Ch).traceMetadata(mol).lenBaseline;
    
    % overall start/end of trace 
    traceStart.(Ch)   = startOfTrace.(Ch) - lenBackset.(Ch); 
    traceEnd.(Ch)     = endOfTrace.(Ch) + lenBaseline.(Ch); 
    % Time data
    T.(Ch)    = stkData.(Ch).time(1,traceStart.(Ch):traceEnd.(Ch));
    Tdat.(Ch) = stkData.(Ch).time(1,startOfTrace.(Ch):endOfTrace.(Ch));
    Tmin(n)   = min(T.(Ch));
    Tmax(n)   = max(T.(Ch));
end
T=[min(Tmin) max(Tmax)];

if T(1,1) < 1.5*handles.dt
    handles.timeStep = handles.dt;
    handles.Tmin     = handles.dt;
    handles.Tmax     = T(1,2);
 else
    handles.timeStep = Tdat.Ch1(1);
    handles.Tmin     = T(1,1);
    handles.Tmax     = T(1,2);
end

%Initialize Tracking
handles.minImage  = round(handles.Tmin/handles.dt);
handles.maxImage  = round(handles.Tmax/handles.dt);
nImages           = round(handles.maxImage-handles.minImage);

set(handles.sldTrackFeature,'Min',handles.minImage,'Max',handles.maxImage,...
    'Value',startOfTrace.Ch1,'SliderStep',[1/nImages,2/nImages]);
set(handles.editTrackFeature,'Enable','on','String',num2str(Tdat.Ch1(1)));

% If no value has been calculated for FRET threshold, do it now.
if handles.fretThreshold(mol) == 0
    limit=10;
    handles.fretThreshold(mol) = limit;
end

%Reinitialize Zoom
if handles.config.zoomHold == 0
    set(handles.btnZoomToMolecule,'Enable','on','Value',0);
    set(handles.btnZoomToRegion,'Enable','on','Value',0);
    set(handles.editLwXLim,'Enable','off','String', num2str(0));
    set(handles.editUpXLim,'Enable','off','String', num2str(0));
    set(handles.editLwYLim,'Enable','off','String', num2str(0));
    set(handles.editUpYLim,'Enable','off','String', num2str(0));
    set(handles.btnShowTracking,'Enable','on','Value',0);
    set(handles.btnZoomHold,'Enable','off'); 
    handles.config.zoomIm       = 0;
    handles.zoomFactor          = 0;
    handles.config.showTracking = 0;
    set(handles.editZoomFact,'Enable','off','String', num2str(handles.zoomFactor));
    set(handles.textZoomUnit,'Enable','off');
end

%Reset Bgnd corrections
handles.backgrounds = zeros( 1,2 );

% Set bin checkboxes
 set(handles.chkBin1,'Value', any(handles.noFret_idx==mol));
 set(handles.chkBin2,'Value', any(handles.allFret_idx==mol));
 set(handles.chkBin3,'Value', any(handles.bestFret_idx==mol));
 
% Re-initialize figure objects.
set( handles.edCrosstalk,  'String', sprintf('%.2f',handles.crosstalk(mol)) );
set( handles.sldCrosstalk, 'Value',  handles.crosstalk(mol) );

set( handles.edThreshold,  'String', sprintf('%.2f',handles.fretThreshold(mol)) );
set( handles.sldThreshold, 'Value',  handles.fretThreshold(mol) );

set(handles.btnDonBgd,'Enable','on');
set(handles.btnSubBoth,'Enable','on');
set(handles.btnAccBgd,'Enable','on');
set(handles.btnSubUndo,'Enable','off');

%Update handles
guidata(hObject,handles);
plotter(handles);

    

% --- Executes during object creation, after setting all properties.
function editGoTo_CreateFcn(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to editGoTo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%----------GO TO NEXT MOLECULE----------%
% --- Executes on button press in btnNext - 'Next Molecule'.
function btnNext_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to btnNext (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Goto Next Molecule
set( handles.editGoTo,'String',num2str(handles.molecule_no+1) );
editGoTo_Callback( handles.editGoTo, [], handles );



%----------GO BACK TO PREVIOUS MOLECULE----------%
% --- Executes on button press in btnPrev.
function btnPrev_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to btnPrev (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Goto Previous Molecule
set( handles.editGoTo,'String',num2str(handles.molecule_no-1) );
editGoTo_Callback( handles.editGoTo, [], handles );



%=========================================================================%
%======================       MOLECULE BINNING      ======================%
%=========================================================================%

% ---
% --- noFRET (Monomer Binning)
% ---
function editBin1_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to editBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editBin1_CreateFcn(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to editBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes on button press in chkBin3.
function chkBin1_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to chkBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

mol = handles.molecule_no;
val = get(hObject,'Value');

if val==1 %checking
    handles.noFret_idx = [handles.noFret_idx mol];
    
else %unchecking
    handles.noFret_idx = handles.noFret_idx( ...
                                  handles.noFret_idx~=mol );
end

noFret = numel( handles.noFret_idx );
set(handles.editBin1,'String',num2str(noFret));
set(handles.btnSave,'Enable','on');
guidata(hObject,handles);

% ---
% --- allFRET
% ---
function editBin2_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to editBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editBin2_CreateFcn(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to editBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes on button press in chkBin3.
function chkBin2_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to chkBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

mol = handles.molecule_no;
val = get(hObject,'Value');

if val==1 %checking
    handles.allFret_idx = [handles.allFret_idx mol];
    
else %unchecking
    handles.allFret_idx = handles.allFret_idx(handles.allFret_idx~=mol );
end

allFret = numel( handles.allFret_idx);
set(handles.editBin2,'String',num2str(allFret));
set(handles.btnSave,'Enable','on');
guidata(hObject,handles);


% ---
% --- bestFRET
% ---
function editBin3_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to editBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editBin3_CreateFcn(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to editBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes on button press in chkBin3.
function chkBin3_Callback(hObject, ~, handles) %#ok<DEFNU>
% hObject    handle to chkBin3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

mol = handles.molecule_no;
val = get(hObject,'Value');

if val==1 %checking
    handles.bestFret_idx = [handles.bestFret_idx mol];
    
else %unchecking
    handles.bestFret_idx = handles.bestFret_idx( ...
                                  handles.bestFret_idx~=mol );
end

bestFret = numel( handles.bestFret_idx );
set(handles.editBin3,'String',num2str(bestFret));
set(handles.btnSave,'Enable','on');
guidata(hObject,handles);

% ---
% --- Select all molecules in a bin 
% ---
function btnSelAll_Callback(hObject, ~, handles,index) %#ok<DEFNU>
% hObject    handle to btnSelAll1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

result = questdlg('Are you sure? All existing selections in this bin will be lost', ...
                            'Select all traces','OK','Cancel','Cancel');
if ~strcmp(result,'OK')
    return;
end

if index==1
    handles.noFret_idx = 1:handles.Ntraces;
    set(handles.chkBin1,'Value',1);
elseif index==2
    handles.allFret_idx = 1:handles.Ntraces;
    set(handles.chkBin2,'Value',1);
elseif index==3
    handles.bestFret_idx = 1:handles.Ntraces;
    set(handles.chkBin3,'Value',1);
end

noFret_no = numel( handles.noFret_idx );
allFret_no = numel( handles.allFret_idx );
bestFret_no = numel( handles.bestFret_idx );

set(handles.editBin1,'String',num2str(noFret_no));
set(handles.editBin2,'String',num2str(allFret_no));  
set(handles.editBin3,'String',num2str(bestFret_no));

set(handles.btnSave,'Enable','on');
guidata(hObject,handles);


%=========================================================================%
%======================       GET TRACE DATA        ======================%
%=========================================================================%

% --- Executes on button press in btnClearData.
function btnClearData_Callback(hObject, eventdata, handles)
% hObject    handle to btnClearData (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Clear the original stack to save memory
if isappdata(handles.figure1,'accData')
    rmappdata(handles.figure1,'accData');
end

if isappdata(handles.figure1,'donData')
    rmappdata(handles.figure1,'donData');
end

donData=struct([]);
accData=struct([]);
assignin('base','donData',donData)
assignin('base','accData',accData)

% Image stack is stored in ApplicationData for memory efficiency
setappdata(handles.figure1,'donData', donData);
setappdata(handles.figure1,'accData', accData);


% --- Executes on button press in btnGetDataAcc.
function btnGetDataAcc_Callback(hObject, eventdata, handles)
% hObject    handle to btnGetDataAcc (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Same as above, but only for both donor and acceptor.

accData = getappdata(handles.figure1,'accData')
nAccData=size(accData,2)

timeLimits=get(handles.axFluor,'XLim');

acc = findobj(handles.axFluor,'Type','line','-and','Color','red');
% don = findobj(handles.axFluor,'Type','line','-and','Color','green');
% total = findobj(handles.axTotal,'Type','line','-and','Color','black');
% fret = findobj(handles.axFret,'Type','line','-and','Color','blue');
time=acc.XData;
idxTimeRange = time>=timeLimits(1) & time<=timeLimits(2);
accInt=acc.YData;
% donInt=don.YData;
% totalInt=total.YData;
% fretVal=fret.YData;
meanAcc = nanmean(accInt(idxTimeRange));
% meanDon = nanmean(donInt(idxTimeRange));
% meanTotal = nanmean(totalInt(idxTimeRange));
% meanFret = nanmean(fretVal(idxTimeRange));

% Update and export data to workspace
accData(nAccData+1).meanAcc=meanAcc; 
% tmpData(nData+1).meanDon=meanDon; 
% tmpData(nData+1).meanTotal=meanTotal; 
% tmpData(nData+1).meanFret=meanFret; 
assignin('base','accData',accData)

% Image stack is stored in ApplicationData for memory efficiency
setappdata(handles.figure1,'accData', accData);

guidata(hObject,handles);


% --- Executes on button press in btnGetDataDon.
function btnGetDataDon_Callback(hObject, eventdata, handles)
% hObject    handle to btnGetDataDon (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

donData = getappdata(handles.figure1,'donData');
nDonData=size(donData,2);

timeLimits=get(handles.axFluor,'XLim');

don = findobj(handles.axFluor,'Type','line','-and','Color','green');

time=don.XData;
idxTimeRange = time>=timeLimits(1) & time<=timeLimits(2);
donInt=don.YData;
meanDon = nanmean(donInt(idxTimeRange));

% Update and export data to workspace
donData(nDonData+1).meanDon=meanDon;
assignin('base','donData',donData)

% Image stack is stored in ApplicationData for memory efficiency
setappdata(handles.figure1,'donData', donData);

guidata(hObject,handles);


%=========================================================================%
%======================      TRACE CORRECTIONS      ======================%
%=========================================================================%

%----------HANDLE BACKGROUND SUBSTRACTION BUTTONS----------%
% --- Executes on button press in btnSubBoth.
function btnSubBoth_Callback(hObject, eventdata, handles, mode)

mol    = handles.molecule_no;
dt     = handles.dt;
Tmax   = handles.Tmax;
Tmin   = handles.Tmin;
maxLen = floor(Tmax/dt);
minLen = floor(Tmin/dt);

% Same as above, but only for both donor and acceptor.
xlim=get(handles.axFluor,'XLim');

% Convert axis limits to frames
xlim = floor(xlim./dt);
if xlim(1)<minLen, xlim(1)=minLen; end
if xlim(2)>maxLen, xlim(2)=maxLen; end

% Subtract donor background
% mode specifies which channels to substrate (3 means ALL).

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');
acc = stkData.Ch1.int(mol,:);
don = stkData.Ch2.int(mol,:);

% Subtract acceptor background
% mode specifies which channels to substrate (3 means ALL, 4 means undo).

if mode==1 || mode==3
    handles.backgrounds(1) = mean( acc(xlim(1):xlim(2)) );
    % only subtract bgd from acceptor where signal is > or < zero
    idxAcc      = abs(acc)>0;
    tmpAcc      = acc(idxAcc);
    tmpAcc      = tmpAcc - handles.backgrounds(1);
    acc(idxAcc) = tmpAcc;
end

% Subtract donor background
if mode==2 || mode==3
    handles.backgrounds(2) = mean( don(xlim(1):xlim(2)) );
    % only subtract bgd from donor where signal is > or < zero
    idxDon      = abs(don)>0;
    tmpDon      = don(idxDon);
    tmpDon      = tmpDon - handles.backgrounds(2);
    don(idxDon) = tmpDon;
end

% Undo background subtraction
if mode==4
    % only add bgd back to acceptor where signal is > or < zero
    idxAcc      = abs(acc)>0;
    tmpAcc      = acc(idxAcc);
    tmpAcc      = tmpAcc + handles.backgrounds(1);
    acc(idxAcc) = tmpAcc;
    % only add bgd back to donor where signal is > or < zero
    idxDon = abs(don)>0;
    tmpDon      = don(idxDon);
    tmpDon = tmpDon + handles.backgrounds(2);
    don(idxDon) = tmpDon;
end

% Save the modified traces.
stkData.Ch1.int(mol,:) = acc;
stkData.Ch2.int(mol,:) = don;

if mode<4
    set(handles.btnSubUndo,'Enable','on');    %undo
else  %undo
    set(handles.btnSubUndo,'Enable','off');    %undo
end

% Clear the original stack to save memory
if isappdata(handles.figure1,'stkData')
    rmappdata(handles.figure1,'stkData');
end
% Image stack is stored in ApplicationData for memory efficiency
setappdata(handles.figure1,'stkData', stkData);

%handles = updateTraceData( handles );
guidata(hObject,handles);
plotter(handles);

%----------HANDLE REMOVE FRET BACKGROUND ----------%
% --- Executes on button press in btnRmFretBgd.
function btnRmFretBgd_Callback(hObject, eventdata, handles, mode)

mol    = handles.molecule_no;
dt     = handles.dt;
Tmax   = handles.Tmax;
Tmin   = handles.Tmin;
maxLen = floor(Tmax/dt);
minLen = floor(Tmin/dt);

% Same as above, but only for both donor and acceptor.
xlim=get(handles.axFluor,'XLim');

% Convert axis limits to frames
xlim = floor(xlim./dt);
if xlim(1)<minLen, xlim(1)=minLen; end
if xlim(2)>maxLen, xlim(2)=maxLen; end

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');
acc = stkData.Ch1.int(mol,:);
don = stkData.Ch2.int(mol,:);

% Remove FRET background
if mode==1
    handles.fretBgd        = zeros(2,size(xlim(1):xlim(2),2));
    handles.fretBgd(1,:)   = acc(xlim(1):xlim(2));
    handles.fretBgdXlim(1) = xlim(1);
    acc(xlim(1):xlim(2))     = 0;
    handles.fretBgd(2,:)   = don(xlim(1):xlim(2));
    handles.fretBgdXlim(2) = xlim(2);
    don(xlim(1):xlim(2))     = 0;
end

% Undo background subtraction
if mode==2
    xlim1 = handles.fretBgdXlim(1);
    xlim2 = handles.fretBgdXlim(2);
    acc(xlim1:xlim2) = handles.fretBgd(1,:);
    don(xlim1:xlim2) = handles.fretBgd(2,:);
end

% Save the modified traces.
stkData.Ch1.int(mol,:) = acc;
stkData.Ch2.int(mol,:) = don;

if mode<3
    set(handles.btnUndoRmFretBgd,'Enable','on');    %undo
else  %undo
    set(handles.btnUndoRmFretBgd,'Enable','off');    %undo
end

% Clear the original stack to save memory
if isappdata(handles.figure1,'stkData')
    rmappdata(handles.figure1,'stkData');
end
% Image stack is stored in ApplicationData for memory efficiency
setappdata(handles.figure1,'stkData', stkData);

%handles = updateTraceData( handles );
guidata(hObject,handles);
plotter(handles);



% --- Executes on button press in btnUndoRmFretBgd.
function btnUndoRmFretBgd_Callback(hObject, eventdata, handles)
% hObject    handle to btnUndoRmFretBgd (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


%----------ADJUST CROSSTALK WITH SLIDER----------%
% --- Executes on slider movement.
function sldCrosstalk_Callback(hObject, eventdata, handles)
%Called when user changes the scroll bar for specifying FRET threshold.

mol = handles.molecule_no;
oldCrosstalk = handles.crosstalk(mol);
newCrosstalk = get(hObject,'Value');

% Verify the value is within the range of the slider bar.
rangeCrosstalk=get(handles.sldCrosstalk,'Min'):...
               get(handles.sldCrosstalk,'Max');

if newCrosstalk < min(rangeCrosstalk)
    disp('WARNING in viewtraces: CRT lowerLimit');
    newCrosstalk = min(rangeCrosstalk);
    
elseif newCrosstalk > max(rangeCrosstalk)
    disp('WARNING in viewtraces: CRT upperLimit');
    newCrosstalk = max(rangeCrosstalk);
end

% Update slider und edit txt window
set(handles.sldCrosstalk,'Value',newCrosstalk);
set( handles.edCrosstalk, 'String',sprintf('%.2f',newCrosstalk) );

% Adjust the acceptor fluorescence to subtract donor->acceptor crosstalk
% according to the new value. The trace has already been adjusted according
% to the old value, so that has to be "undone" first.

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');
acc = stkData.Ch1.int(mol,:);
don = stkData.Ch2.int(mol,:);
acc = acc +( oldCrosstalk - newCrosstalk )*don;

% Clear the original stack to save memory
if isappdata(handles.figure1,'stkData')
    rmappdata(handles.figure1,'stkData');
end

% Save the modified traces.
stkData.Ch1.int(mol,:) = acc;
stkData.Ch1.traceMetadata(mol).crosstalk(1,2) = newCrosstalk;

% Image stack is re-stored in ApplicationData
setappdata(handles.figure1,'stkData', stkData);

% Update handles structure and make the corrections
handles.crosstalk(mol) = newCrosstalk;
guidata(hObject,handles);
plotter(handles);

function edCrosstalk_Callback(hObject, eventdata, handles)
% Called when user changes the text box for specifying FRET threshold.

mol = handles.molecule_no;
oldCrosstalk = handles.crosstalk(mol);
newCrosstalk = str2double(get(hObject,'String'));

% Verify the value is within the range of the slider bar.
rangeCrosstalk=get(handles.sldCrosstalk,'Min'):...
               get(handles.sldCrosstalk,'Max');

if newCrosstalk < min(rangeCrosstalk)
    disp('WARNING in viewtraces: CRT lowerLimit');
    newCrosstalk = min(rangeCrosstalk);
    
elseif newCrosstalk > max(rangeCrosstalk)
    disp('WARNING in viewtraces: CRT upperLimit');
    newCrosstalk = max(rangeCrosstalk);
end

% Update slider und edit txt window
set( hObject,'String',sprintf('%.2f',newCrosstalk ) );
set(handles.sldCrosstalk,'Value',newCrosstalk);

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');
acc = stkData.Ch1.int(mol,:);
don = stkData.Ch2.int(mol,:);
acc = acc +( oldCrosstalk-newCrosstalk )*don;
                         
% Clear the original stack to save memory
if isappdata(handles.figure1,'stkData')
    rmappdata(handles.figure1,'stkData');
end

% Save the modified traces.
stkData.Ch1.int(mol,:) = acc;

% Image stack is re-stored in ApplicationData
setappdata(handles.figure1,'stkData', stkData);

% Update handles structure and make the corrections
handles.crosstalk(mol) = newCrosstalk;
guidata(hObject,handles);
plotter(handles);


%----------ADJUST FRET THRESHOLD WITH SLIDER----------%
% --- Executes on slider movement.
function sldThreshold_Callback(hObject, eventdata, handles)
% Called when user changes the scroll bar for specifying FRET threshold.

% Update slider with new value
value = get(hObject,'Value');
set(handles.sldThreshold,'String', sprintf('%.2f',value ));
set(handles.edThreshold,'String', sprintf('%.2f',value ));

% Plot data with new threshold value
mol = handles.molecule_no;
handles.fretThreshold(mol) = value;
guidata(hObject,handles);
plotter(handles);


function edThreshold_Callback(hObject, eventdata, handles)
%Called when user changes the text box for specifying FRET threshold.

totalThresh = str2double( get(hObject,'String') );

% Verify the value is within the range of the slider bar. If not, it should
% be expanded to accomodate the new value or this will give an error.
rangeTotalThresh=0:2000;

if totalThresh < min(rangeTotalThresh)
    disp('WARNING in viewtraces: lowerLimit');
    totalThresh = min(rangeTotalThresh);
    set( hObject,'String',num2str(totalThresh) );
    
elseif totalThresh > max(rangeTotalThresh)
    disp('WARNING in viewtraces: upperLimit');
    totalThresh = max(rangeTotalThresh);
    set( hObject,'String',num2str(totalThresh) );
    
else
    set( hObject,'String',sprintf('%.2f',totalThresh ) );
    set(handles.sldThreshold,...
        'Min',min(rangeTotalThresh),...
        'Max',max(rangeTotalThresh),...
        'Value',totalThresh,...
        'SliderStep',[20/max(rangeTotalThresh),40/max(rangeTotalThresh)]);
end

mol    = handles.molecule_no;
handles.fretThreshold(mol) = totalThresh; 

% Plot data with new threshold value
guidata(hObject,handles);
plotter(handles);

%=========================================================================%
%======================      SAVE TRACES FILES      ======================%
%=========================================================================%
% --- Executes on button press in btnSave.
function btnSave_Callback(hObject, eventdata, handles)

%---
%--- Save noFret_traces
%---

noFret = sort(handles.noFret_idx);
if ~isempty(noFret)
    %--- Save indexes of picked molecules to file
    outfileTxt = strrep(handles.filename,'.mat', '_noFret.txt');
    saveSelections(handles, noFret, outfileTxt);
end  

%---
%--- Save allFret_traces
%---

allFret = sort(handles.allFret_idx);
if ~isempty(allFret)
    %--- Save indexes of picked molecules to file
    outfileTxt = strrep(handles.filename,'.mat', '_allFret.txt');
    saveSelections(handles, allFret, outfileTxt);
end  

%---
%--- Save bestFret_traces
%---

bestFret = sort(handles.bestFret_idx);
if ~isempty(bestFret)
    %--- Save indexes of picked molecules to file
    outfileTxt = strrep(handles.filename,'.mat', '_bestFret.txt');
    saveSelections(handles, bestFret, outfileTxt);
end  

set(hObject,'Enable','off');

function saveSelections(handles, filterVal, outfileTxt)

fretTraces=[];

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');

% Metadata Field Names
metaFN = {'ids',...
          'lenBackset',...
          'startOfTrace',...
          'endOfTrace',...
          'lenBaseline',...
          'traceLen',...
          'maxSnr',...
          'meanInt',...
          'meanXIntAcc',...
          'meanXIntDon',...
          'meanXSnrAcc',...
          'meanXSnrDon',...
          'meanXCrt',...
          'crosstalk'};      

% Trace Statistics Field Names
traceStatFN = {'ids',...
               'filterVal',...
               'meanXSnrAcc',...
               'meanXCrt',...
               'meanTotal',...
               'meanFret',...
               'lt',...
               'NotME',...
               'MESegm',...
               'MEDist',...
               'MESortTimes',...
               'MEOffTimes'};    

           
%--- Save filter values to txt file
fid = fopen(outfileTxt,'w');
fprintf(fid, '%d ', filterVal); fprintf(fid,'\n');
fclose(fid);

%--- Save traces of picked molecules to mat file
for n=1:handles.nChannels
    ch=['Ch' num2str(n)];
    fretTraces.(ch).time   = stkData.(ch).time;
    fretTraces.(ch).x      = stkData.(ch).x(filterVal,:);
    fretTraces.(ch).y      = stkData.(ch).y(filterVal,:);

    if isfield(stkData.(ch),'xCorr')
        fretTraces.(ch).xCorr = stkData.(ch).xCorr(filterVal,:);
        fretTraces.(ch).yCorr = stkData.(ch).yCorr(filterVal,:);
    end   

    fretTraces.(ch).int    = stkData.(ch).int(filterVal,:);
    fretTraces.(ch).snr    = stkData.(ch).snr(filterVal,:);

    % Update Metadata for each trace 
    for i=1:numel(filterVal)
        %Update Metadata
        for k=1:numel(metaFN)
            fn=metaFN{k};
            if isfield(stkData.(ch).traceMetadata,fn)
                fretTraces.(ch).traceMetadata(i).(fn) =...
                stkData.(ch).traceMetadata(filterVal(i)).(fn);
            end
        end
    end %End Update Metadata
end

% Update Fret data 
if isfield(stkData,'Fret')
    fretTraces.Fret.idlTotal = stkData.Fret.idlTotal(filterVal,:);
    fretTraces.Fret.total    = stkData.Fret.total(filterVal,:);
    % Update Fret trace statistics 
    for i=1:numel(filterVal)
        %Update traceStat
        for k=1:numel(traceStatFN)
            fn=traceStatFN{k};
            if isfield(stkData.Fret.traceStatSel,fn)
                fretTraces.Fret.traceStatSel(i).(fn) =...
                stkData.Fret.traceStatSel(filterVal(i)).(fn);
            end
        end
    end %End Update Fret data
end

% Update Diffusion Data
if isfield(stkData,'Diff')
    ids = stkData.Diff.Ch1.segResFinal(:,23);
    filterIdx = ismember(ids,filterVal);
    fretTraces.Diff.Ch1.segResFinal = stkData.Diff.Ch1.segResFinal(filterIdx,:);
    
    % Reset Molecule Counter in Column 23
    z=1;
    oldIds = fretTraces.Diff.Ch1.segResFinal(:,23);
    newIds = zeros(numel(oldIds),1);
    prvId  = oldIds(1);  
    for i=1:numel(oldIds)
        id=oldIds(i);
        if id==prvId
            newIds(i)=z;
        else
            z=z+1;
            newIds(i)=z;
        end
        prvId=id;
    end    
    fretTraces.Diff.Ch1.segResFinal(:,23) = newIds;
    
    % Save
    if isfield(fretTraces.Diff,'Ch2')
        fretTraces.Diff.Ch2.segResFinal = stkData.Diff.Ch2.segResFinal;
    end
    fretTraces.Diff.Ch1.idlImb = stkData.Diff.Ch1.idlImb(filterVal,:);
    fretTraces.Diff.Ch1.idlCnf = stkData.Diff.Ch1.idlCnf(filterVal,:);
    fretTraces.Diff.Ch1.idlFre = stkData.Diff.Ch1.idlFre(filterVal,:);
    fretTraces.Diff.Ch1.idlSpr = stkData.Diff.Ch1.idlSpr(filterVal,:);
end

% Update Filter Parameter
if isfield(stkData,'Fret') && isfield(stkData.Fret,'pstFltVal')
    fretTraces.Fret.pstFltVal = stkData.Fret.pstFltVal;
end
    
% Save to File 
outfileMat=strrep(outfileTxt,'.txt','.mat');
save(outfileMat,'-mat','fretTraces','-v7.3');
disp(['SAVED: ' outfileMat]);

%=========================================================================%
%======================        TRACK FEATURE        ======================%
%=========================================================================%

function editTrackFeature_Callback(hObject, eventdata, handles)
% hObject    handle to editTrackFeature (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

timeStep=single(str2double(get(hObject,'String')));
% If trace ID is invalid, reset it to what it was before.
interval=handles.Tmin:handles.dt:handles.Tmax;
nImages=round(handles.maxImage-handles.minImage);
timeStep=round(timeStep*10000)/10000;

if timeStep == min(interval)
    disp('WARNING in viewtraces: Invalid trace number (lowerLimit). Resetting.');
elseif timeStep >= max(interval)
    disp('WARNING in viewtraces: Invalid trace number (upperLimit). Resetting.');
else
    set( hObject,'String',num2str(timeStep) );
    currentImage=int16(timeStep/handles.dt);
    set(handles.sldTrackFeature,...
        'Min',handles.minImage,...
        'Max',handles.maxImage,...
        'Value',currentImage,...
        'SliderStep',[1/nImages,2/nImages]);
end
handles.timeStep = timeStep;
guidata(hObject, handles);
tracker(handles);

% --- Executes during object creation, after setting all properties.
function editTrackFeature_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes on slider movement.
function sldTrackFeature_Callback(hObject, eventdata, handles)
value=round(get(hObject,'Value'));
handles.timeStep=value*handles.dt;
set(handles.editTrackFeature,'String', num2str(handles.timeStep) );
editTrackFeature_Callback( handles.editTrackFeature, [], handles );
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function sldTrackFeature_CreateFcn(hObject, eventdata, handles)
if isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end

% --- Executes on scroll wheel click while the figure is in focus.
function figure1_WindowScrollWheelFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.FIGURE)
%	VerticalScrollCount: signed integer indicating direction and number of clicks
%	VerticalScrollAmount: number of lines scrolled for each click
% handles    structure with handles and user data (see GUIDATA)

scrollDirection=eventdata.VerticalScrollCount;
%value=round(get(handles.sldTrackFeature,'Value'));

tmpValue=get(handles.sldTrackFeature,'Value');
% value=round(tmpValue{2});
value=round(tmpValue);
handles.timeStep=(value+scrollDirection)*handles.dt;

interval=handles.Tmin:handles.dt:handles.Tmax;
if handles.timeStep < min(interval)
    disp('WARNING in viewtraces: Invalid trace number (lowerLimit). Resetting.');
    handles.timeStep=min(interval);
    return
elseif handles.timeStep > max(interval)
    disp('WARNING in viewtraces: Invalid trace number (upperLimit). Resetting.');
    handles.timeStep=max(interval);
    return
end

set(handles.editTrackFeature,'String', num2str(handles.timeStep));
editTrackFeature_Callback( handles.editTrackFeature, [], handles );
guidata(hObject, handles);


%=========================================================================%
%======================   PLOT TRACES               ======================%
%=========================================================================%

%----------PLOT TRACES------------%
function plotter(handles)
set(gcf,'GraphicsSmoothing','off')

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');

%--- Plot Images
mol    = handles.molecule_no;
nameCh = {'Ch1';'Ch2'}; % Acceptor=Ch1; Donor=Ch2
paint  = {'r';'g'};

for n=1:handles.nChannels
    Ch=nameCh{n};
    lenBackset.(Ch)   = stkData.(Ch).traceMetadata(mol).lenBackset;
    startOfTrace.(Ch) = stkData.(Ch).traceMetadata(mol).startOfTrace;
    endOfTrace.(Ch)   = stkData.(Ch).traceMetadata(mol).endOfTrace;
    lenBaseline.(Ch)  = stkData.(Ch).traceMetadata(mol).lenBaseline;

    if isfield(stkData.(Ch).traceMetadata,'maxSnr')
        maxSnr.(Ch)       = stkData.(Ch).traceMetadata(mol).maxSnr;
    end

    % overall start of trace 
    traceStart.(Ch)   = startOfTrace.(Ch) - lenBackset.(Ch);

    % overall end of trace 
    traceEnd.(Ch)     = endOfTrace.(Ch)   + lenBaseline.(Ch);
    Xdat.(Ch)  = stkData.(Ch).x(mol,startOfTrace.(Ch):endOfTrace.(Ch));
    Ydat.(Ch)  = stkData.(Ch).y(mol,startOfTrace.(Ch):endOfTrace.(Ch));

    if isfield(stkData.(Ch),'xCorr')
       XdatCorr.(Ch)  = stkData.(Ch).xCorr(mol,startOfTrace.(Ch):endOfTrace.(Ch));
       YdatCorr.(Ch)  = stkData.(Ch).yCorr(mol,startOfTrace.(Ch):endOfTrace.(Ch));   
    end

    if isfield(stkData.(Ch).traceMetadata,'meanXSnr')
       meanXSnr.(Ch)  = stkData.(Ch).traceMetadata(mol).meanXSnr;
    end 

    I.(Ch)     = stkData.(Ch).int(mol,traceStart.(Ch):traceEnd.(Ch));
    Idat.(Ch)  = stkData.(Ch).int(mol,startOfTrace.(Ch):endOfTrace.(Ch));
    Ibgd.(Ch)  = stkData.(Ch).int(mol,endOfTrace.(Ch):traceEnd.(Ch));
    T.(Ch)     = stkData.(Ch).time(1,traceStart.(Ch):traceEnd.(Ch));
    Tdat.(Ch)  = stkData.(Ch).time(1,startOfTrace.(Ch):endOfTrace.(Ch));
    Tbgd.(Ch)  = stkData.(Ch).time(1,endOfTrace.(Ch):traceEnd.(Ch));
    
    
    ID.(Ch) = stkData.(Ch).traceMetadata(mol).ids;
    
end


%----
%---- Idealization of total intensity
%----
donorRange = traceStart.Ch2:traceEnd.Ch2;

if isfield(stkData,'Fret')
    idl = stkData.Fret.idlTotal(mol,donorRange);
end

%----
%---- Update Molecule ID in window
%----
set(handles.editIdCh1,'String',ID.Ch1);
set(handles.editIdCh2,'String',ID.Ch2);
    

%----
%---- Show images with molecule marker
%----
% Initialize Parameters
currentImage = int16(handles.timeStep/handles.dt);

% Plot image for Ch1
cla(handles.axImageCh1);
image(stkData.Ch1.im(:,:,currentImage),'CDataMapping','scaled',...
    'Parent',handles.axImageCh1);

% Set image boundaries
axis(handles.axImageCh1,[0 handles.imsize(1,1) 0 handles.imsize(1,2)]);
hold(handles.axImageCh1,'on');
featsize=2.5;

% Plot trajectory
plotTrajectory(handles,1,featsize)
ylabel(handles.axImageCh1,'y [Pixels]');
xlabel(handles.axImageCh1,'x [Pixels]');
title(handles.axImageCh1,'Ch1 ');

% Plot image for Ch2
cla(handles.axImageCh2);
image(stkData.Ch2.im(:,:,currentImage),'CDataMapping','scaled',...
    'Parent',handles.axImageCh2);

% Set image boundaries
axis(handles.axImageCh2,[0 handles.imsize(1,1) 0 handles.imsize(1,2)]);
hold(handles.axImageCh2,'on');

% Plot trajectory
set(handles.axImageCh2, 'YTick', []);
plotTrajectory(handles,2,featsize);
xlabel(handles.axImageCh2,'x [Pixels]');
title(handles.axImageCh2,'Ch2 ');


%----
%---- Plot xy trace
%----
cla(handles.axXYtrace);

try
    XdatAcc=XdatCorr.Ch1; YdatAcc=YdatCorr.Ch1;
catch
    XdatAcc=Xdat.Ch1; YdatAcc=Ydat.Ch1;
end
XdatDon=Xdat.Ch2; YdatDon=Ydat.Ch2;
startDonTrack=size(XdatAcc,2);

idx          = XdatAcc==0;
XdatAcc(idx) = NaN;
YdatAcc(idx) = NaN;
idx          = Xdat.Ch2==0;
Xdat.Ch2(idx)= NaN;
Ydat.Ch2(idx)= NaN;

% Plot donor track (only the tracked part, not the mapped part)
line(Xdat.Ch2(startDonTrack:end),Ydat.Ch2(startDonTrack:end),...
    'Parent',handles.axXYtrace,...
    'LineStyle','-',...
    'Marker','.',...
    'LineWidth',0.1,...
    'Color','g');hold on

% Plot donor track
line(Xdat.Ch2,Ydat.Ch2,...
    'Parent',handles.axXYtrace,...
    'LineStyle','-',...
    'Marker','none',...
    'LineWidth',0.1,...
    'Color','g');

% Plot acceptor track
line(XdatAcc,YdatAcc,...
    'Parent',handles.axXYtrace,...
    'LineStyle','--',...
    'Marker','.',...
    'LineWidth',0.1,...
    'Color','r');

% Set Boundaries
xlim(handles.axXYtrace,'auto');
ylim(handles.axXYtrace,'auto');
xLimits = get(handles.axXYtrace,'YLim');
yLimits = get(handles.axXYtrace,'XLim');
dxLim = abs(xLimits(1)-xLimits(2));
dyLim = abs(yLimits(1)-yLimits(2));
minDxy = 5;
if dxLim < minDxy || dyLim < minDxy
    xCenter = (nanmean([XdatAcc,XdatDon]));
    yCenter = (nanmean([YdatAcc,YdatDon]));
    set(handles.axXYtrace,...
    'xlim', [xCenter-0.5*minDxy xCenter+0.5*minDxy]);
    set(handles.axXYtrace,...
    'ylim', [yCenter-0.5*minDxy yCenter+0.5*minDxy]);
end

%----
%---- Plot Fluorescence
%----
cla(handles.axFluor);

acceptor   = stkData.Ch1.int(mol,donorRange);
donor      = stkData.Ch2.int(mol,donorRange);
total      = acceptor+donor;

tmax=handles.Tmin+size(total,2)*handles.dt;
tmin=handles.Tmin;

% Calculate FRET
fret = acceptor./total;
fret( total<handles.fretThreshold(mol) ) = 0;

for n=handles.nChannels:-1:1  
    % Plot Acceptor and Donor
    Ch=nameCh{n};
    color=paint{n};
    line(T.(Ch),I.(Ch),...
    'Parent',handles.axFluor,...
    'LineWidth',0.1,...
    'LineStyle','-',...
    'Color',color);hold on
    
    % Plot bars indicating the tracked region
    timeInterval = [Tdat.(Ch)(1);Tdat.(Ch)(end)];
    xTrackRegion = [timeInterval(1) timeInterval(2)...
                    timeInterval(2) timeInterval(1) timeInterval(1)];
    if n==1
        yTrackRegion = [-125 -125 -175 -175 -125];
    elseif n==2
        yTrackRegion = [-275 -275 -325 -325 -275];
    end
    fill(xTrackRegion,yTrackRegion,color,...
        'EdgeColor','none',...
        'Parent',handles.axFluor);
end
lwYLim = -400;
if max(I.Ch2+200) > lwYLim
    upYLim = max(I.Ch2+200);
else
    upYLim = 1000;
end
set(handles.axFluor, 'ylim', [lwYLim upYLim]);

xlim(handles.axFluor,[tmin tmax]);
title(handles.axFluor,...
    ['Molecule ' num2str(mol) ' of ' num2str(handles.Ntraces)]);
    

%----
%---- Plot Total Intensity
%----
cla(handles.axTotal);

% Plot total intensity and threshold at once 
tSgm     = [T.Ch2, NaN,  T.Ch2];
totalSgm = [total, NaN, repmat(handles.fretThreshold(mol),1,size(T.Ch2,2))]; 
line(tSgm,totalSgm,...
    'Parent',handles.axTotal,...
    'LineWidth',0.1,...
    'Color','k');

% Plot idealized total intensity
if isfield(stkData,'Fret')
    meanTotal=nanmean(total(logical(idl)));
    total_idl = meanTotal.*idl;
    line(T.Ch2,total_idl,...
        'Parent',handles.axTotal,...
        'LineWidth',0.1,...
        'Color','r');
end

% Find lw/up limit for y-axis
iMax=max(acceptor+donor);
upLim=iMax+0.1*iMax;
iMin=min([acceptor+donor,-50]);
lwLim=iMin-0.1*iMin;

if isnan(upLim) || isnan(lwLim)
    % default values
    lwLim = -400;
    upLim = 800;
end

ylim(handles.axTotal,[lwLim upLim])

%----
%---- Plot FRET Efficiency
%----

% Advanced Colormap
cmap = [0,   0,   1     % blue:         imobile
        0,   0.7, 1     % light blue:   confined
        0,   1,   1     % cyan:         free
        1,   0,   1];   % magenta:      super

cla(handles.axFret);

if isfield(stkData,'Diff') && isfield(stkData,'Fret')
    % Get number of tracks
    ids = stkData.Diff.Ch1.segResFinal(:,23); % ids column
    % Get number of segments in a track
    lia = ismember(ids,mol); %lia is a logical column
    % Find the idx where vector is logical true 
    idx = lia == 1;
    % Get Segments
    seg    = stkData.Diff.Ch1.segResFinal(idx,1:2);
    state  = stkData.Diff.Ch1.segResFinal(idx,3);
    
    % Plot Diffusion Bar
    nSegs = sum(lia);
    for s = 1:nSegs 
        switch state(s)
            case 0
                color=cmap(1,:);
            case 1
                color=cmap(2,:);
            case 2
                color=cmap(3,:);
            case 3
                color=cmap(4,:);
        end
        
        segT=(seg(s,1):seg(s,2)).*handles.dt;
        
        xRegion = [segT(1) segT(end) segT(end) segT(1) segT(1)];
        yRegion = [-0.1 -0.1 -0.03 -0.03 -0.1];
        fill(xRegion,yRegion,color,...
        'EdgeColor','none',...
        'Parent',handles.axFret);
        alpha(handles.axFret,0.8);
    end
    
    % Load logical matrix for segment analysis
    switch handles.config.diffMode
        case 0
            idl = stkData.Diff.Ch1.idlImb(mol,donorRange);
        case 1
            idl = stkData.Diff.Ch1.idlCnf(mol,donorRange);
        case 2
            idl = stkData.Diff.Ch1.idlFre(mol,donorRange);
        case 3
            idl = stkData.Diff.Ch1.idlSpr(mol,donorRange);
    end
            
end

% Plot Fret trace
if isfield(stkData,'Fret')
    fret_idl = fret.*idl;
    line(T.Ch2,fret_idl,...
        'Parent',handles.axFret,...
        'LineWidth',0.1,...
        'LineStyle','-',...
        'Color','b');
else
    line(T.Ch2,fret,...
        'Parent',handles.axFret,...
        'LineWidth',0.1,...
        'LineStyle','-',...
        'Color','b');
end

ylim(handles.axFret,[-0.15 1.15]);

%----
%---- Info Acceptor Statistics
%----

% LT
lt=numel(Idat.Ch1)*handles.dt; %in s
set(handles.editLt,'String',num2str(lt));

% S/N acceptor
isZeroBgd=Ibgd.Ch1==0;
if nansum(~isZeroBgd)>0
    Ibgd.Ch1=Ibgd.Ch1(~isZeroBgd);
    snr = nanmean(Idat.Ch1)/nanstd(Ibgd.Ch1);
    set(handles.editSnr1,'String',num2str(snr));
else
    set(handles.editSnr1,'String','no bgd data');
end

% Ratio: locMeanAccInt / locMeanBgdInt (meanXSnrAcc)
if isfield(stkData.Ch1.traceMetadata,'meanXSnrAcc')
    meanXSnrAcc=stkData.Ch1.traceMetadata(mol).meanXSnrAcc;
    set(handles.editSnr2,'String',num2str(meanXSnrAcc));
else
    set(handles.editSnr2,'String','meanXSnr');
end

% Mean acceptor intensity
accMean=nanmean(Idat.Ch1);
set(handles.editAccMean,'String',num2str(accMean));

% Mean acceptor intensity
donMean=nanmean(Idat.Ch2);
set(handles.editDonMean,'String',num2str(donMean));

% Calcualte correlation coefficient
if isfield(stkData,'Fret')
    ccDon=donor(logical(idl));
    ccAcc=acceptor(logical(idl)); 
    isNaNFret=isnan(ccDon);
    cc = corrcoef( ccDon(~isNaNFret),ccAcc(~isNaNFret));
    set(handles.editCC,'String',num2str(cc(1,2)));
else
    set(handles.editCC,'String','not defined');
end
%---
%--- Zoom control
%---

% Reset time scale for Donor / Acceptor trace 
zoom(handles.axFluor,'reset');
set(handles.axFluor, 'xlim',[T.Ch1(1) T.Ch1(end)]);

% Auto Zoom to Molecule
if handles.config.zoomHold==1 
    btnZoomToMolecule_Callback(handles.btnZoomToMolecule,[],handles)
end



%=========================================================================%
%======================       TRACK FEATURES        ======================%
%=========================================================================%

%----------Track Traces ----------%
function tracker(handles)

stkData = getappdata(handles.figure1,'stkData');

%--- Definition of Variables
m       = handles.molecule_no;
zFact   = handles.zoomFactor;
nameCh  = {'Ch1';'Ch2';};

for n=1:handles.nChannels
    Ch=nameCh{n};

    startOfTrace = stkData.(Ch).traceMetadata(m).startOfTrace;
    endOfTrace   = stkData.(Ch).traceMetadata(m).endOfTrace;

    Xdat.(Ch)  = stkData.(Ch).x(m,startOfTrace:endOfTrace);
    Ydat.(Ch)  = stkData.(Ch).y(m,startOfTrace:endOfTrace);
end

% Apply coordinate transfromation for each channel if images are resized 
if ~isempty(handles.roiData)
    for n=1:handles.nChannels
        Ch=nameCh{n};
        Xdat.(Ch) = Xdat.(Ch) - handles.roiData(5);
        Ydat.(Ch) = Ydat.(Ch) - handles.roiData(6);
    end
end

%--- Set new axis boundaries for zoom
zoomToRegion = get(handles.btnZoomToRegion,'Value');
if zoomToRegion == 0
    lwXLim=round(Xdat.Ch1(1,1)-zFact);upXLim=round(Xdat.Ch1(1,1)+zFact);
    lwYLim=round(Ydat.Ch1(1,2)-zFact);upYLim=round(Ydat.Ch1(1,2)+zFact);
elseif zoomToRegion ==1
    lwXLim = handles.lwXLim;
    upXLim = handles.upXLim;
    lwYLim = handles.lwYLim;
    upYLim = handles.upYLim;
end

if lwXLim<0, lwXLim=0; end
if upXLim>handles.imsize(1,1), upXLim=handles.imsize(1,1); end
if lwYLim<0, lwYLim=0; end
if upYLim>handles.imsize(1,2), upYLim=handles.imsize(1,2); end

set(handles.editLwXLim,'String', num2str(lwXLim));
set(handles.editUpXLim,'String', num2str(upXLim));

set(handles.editLwYLim,'String', num2str(lwYLim));
set(handles.editUpYLim,'String', num2str(upYLim));


%--- Load image Ch1 
% Plot image
cla(handles.axImageCh1);
currentImage=int16(handles.timeStep/handles.dt);
image(stkData.Ch1.im(:,:,currentImage),'Parent', handles.axImageCh1,...
    'CDataMapping','scaled');
% Zoom Image
if handles.config.zoomIm==1
    xlim(handles.axImageCh1,[lwXLim upXLim]);
    ylim(handles.axImageCh1,[lwYLim upYLim]);
    featsize=1;
else
    xlim(handles.axImageCh1,[0 handles.imsize(1,1)]);
    ylim(handles.axImageCh1,[0 handles.imsize(1,2)]);
    featsize=2.5;
end
% Plot trajectory
hold(handles.axImageCh1,'on');
plotTrajectory(handles,1,featsize);
ylabel(handles.axImageCh1,'y [Pixels]');
xlabel(handles.axImageCh1,'x [Pixels]');
title(handles.axImageCh1,'Ch1 ');


%--- Load image Ch2 
% Plot image
cla(handles.axImageCh2);
image(stkData.Ch2.im(:,:,currentImage),'Parent', handles.axImageCh2,...
    'CDataMapping','scaled');
% Zoom Image
if handles.config.zoomIm==1
    xlim(handles.axImageCh2,[lwXLim upXLim]);
    ylim(handles.axImageCh2,[lwYLim upYLim]);
    featsize=1;
else
    xlim(handles.axImageCh2,[0 handles.imsize(1,1)]);
    ylim(handles.axImageCh2,[0 handles.imsize(1,2)]);
    featsize=2.5;
end

% Plot trajectory Ch2
hold(handles.axImageCh2,'on');
plotTrajectory(handles,2,featsize)
set(handles.axImageCh2, 'YTick', []);
xlabel(handles.axImageCh2,'x [Pixels]');
title(handles.axImageCh2,'Ch2 ');


function plotTrajectory(handles,channel,featsize)
%--------------------------------------------------------------------------
% 
% Localize single molecule and plot temporary trajectory
% Input:   channel number (1,2)
%          feature size
%      
%--------------------------------------------------------------------------

% Initialize Parameters 
circleSize = 2.0;
linewidth  = 1;

% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');

% Iinitilalize parameters
nameCh       = {'Ch1';'Ch2';};
paint        = {'r';'g';'b';'m';'c';'y';'k';'r';'g';'b';'m'};
nameAxes     = {'axImageCh1';'axImageCh2';};
theta        = 0:0.001:2*pi;
currentImage = round(handles.timeStep/handles.dt);

m            = handles.molecule_no;

Ch           = nameCh{channel};
ax           = nameAxes{channel};
color        = paint{channel};

lenBackset   = stkData.(Ch).traceMetadata(m).lenBackset;
startOfTrace = stkData.(Ch).traceMetadata(m).startOfTrace;
endOfTrace   = stkData.(Ch).traceMetadata(m).endOfTrace;
lenBaseline  = stkData.(Ch).traceMetadata(m).lenBaseline;

traceStart   = startOfTrace - lenBackset;  % overall start of trace 
traceEnd     = endOfTrace   + lenBaseline; % overall end of trace 
X.(Ch)       = stkData.(Ch).x(m,:);
Y.(Ch)       = stkData.(Ch).y(m,:);



T.(Ch)       = stkData.(Ch).time(1,traceStart:traceEnd );
Tdat.(Ch)    = stkData.(Ch).time(1,startOfTrace:endOfTrace);
tmin=min(T.(Ch))-0.5*handles.dt;
tmax=max(T.(Ch))+0.5*handles.dt;

if handles.timeStep>=tmin&& handles.timeStep<=tmax
    %---------------------------------------------------------
    % visualize tracks
    if handles.config.showTracking == 1
        if currentImage<=endOfTrace
            xTrackTmp  = X.(Ch)(startOfTrace:currentImage);
            yTrackTmp  = Y.(Ch)(startOfTrace:currentImage);
            plot(handles.(ax),xTrackTmp,yTrackTmp,'LineStyle','-',...
                'LineWidth',linewidth,'Color',color);
        else
            xTrackTmp  = X.(Ch)(startOfTrace:endOfTrace);
            yTrackTmp  = Y.(Ch)(startOfTrace:endOfTrace);
            plot(handles.(ax),xTrackTmp,yTrackTmp,'LineStyle','-',...
                'LineWidth',linewidth,'Color',color);
        end
    end
    %---------------------------------------------------------
    if ~isempty(handles.roiData)
        xMarker=stkData.(Ch).x(m,currentImage)-handles.roiData(5);
        yMarker=stkData.(Ch).y(m,currentImage)-handles.roiData(6);
    else
        xMarker=stkData.(Ch).x(m,currentImage);
        yMarker=stkData.(Ch).y(m,currentImage);
    end
    
    cx = xMarker + featsize*cos(theta)*circleSize;
    cy = yMarker + featsize*sin(theta)*circleSize;

    if handles.timeStep >= min(Tdat.(Ch))-0.5*handles.dt && ...
            handles.timeStep <= max(Tdat.(Ch))+0.5*handles.dt
        plot(handles.(ax),cx,cy,'LineStyle','-','Color',color,...
           'lineWidth',linewidth);
    else
       plot(handles.(ax),cx,cy,'LineStyle','-','Color','m','lineWidth',linewidth);
    end
end

% --- Executes on button press in btnShowTracking.
function btnShowTracking_Callback(hObject, eventdata, handles)
% hObject    handle to btnShowTracking (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer = get(hObject,'Value');
handles.config.showTracking=answer;
guidata(hObject,handles);
 

%=========================================================================%
%======================        ZOOM IMAGE           ======================%
%=========================================================================%
% --- Executes on button press in btnZoomToMolecule.
function btnZoomToMolecule_Callback(hObject, eventdata, handles)
% hObject    handle to btnZoomToMolecule (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%---
%--- Zoom control
%---
% Load single molecule data
stkData = getappdata(handles.figure1,'stkData');

% Get status of 'Zoom Btn'
answer = get(hObject,'Value');
handles.config.zoomIm = answer;
mol    = handles.molecule_no;
nameCh = {'Ch1';'Ch2';}; % Acceptor=Ch1; Donor=Ch2

for n=1:handles.nChannels
    Ch=nameCh{n};
    lenBackset.(Ch)   = stkData.(Ch).traceMetadata(mol).lenBackset;
    startOfTrace.(Ch) = stkData.(Ch).traceMetadata(mol).startOfTrace;
    endOfTrace.(Ch)   = stkData.(Ch).traceMetadata(mol).endOfTrace;
    lenBaseline.(Ch)  = stkData.(Ch).traceMetadata(mol).lenBaseline;
    % overall start of trace 
    traceStart.(Ch)   = startOfTrace.(Ch) - lenBackset.(Ch);
    % overall end of trace 
    traceEnd.(Ch)     = endOfTrace.(Ch)   + lenBaseline.(Ch); 
    I.(Ch)     = stkData.(Ch).int(mol,traceStart.(Ch):traceEnd.(Ch));
    T.(Ch)     = stkData.(Ch).time(1,traceStart.(Ch):traceEnd.(Ch));
end

zoom(handles.axFluor,'reset');
set(handles.axFluor, 'ylim', [-400 max(I.Ch2+200)]);
set(handles.axFluor, 'xlim',[T.Ch1(1) T.Ch1(end)]);

%---
%--- Set Zoom
%---

if handles.config.zoomIm==1
    if handles.zoomFactor == 0
        handles.zoomFactor = handles.config.zoomFact;
    end
    set(handles.btnZoomHold,'Enable','on');
    set(handles.textZoomUnit,'Enable','on');
    zoomVal = round((handles.zoomFactor-400)/-2.25);
    set(handles.editZoomFact,'Enable','on','String', num2str(zoomVal));
    
elseif handles.config.zoomIm==0
    handles.zoomFactor = 0;
    handles.config.zoomHold=0;
    zoomVal = 0;%round((handles.zoomFactor-400)/-2.25);
    set(handles.editZoomFact,'Enable','off','String', num2str(zoomVal));
    set(handles.btnZoomHold,'Enable','off','Value',0);
    set(handles.textZoomUnit,'Enable','off');
end
guidata(hObject,handles);
tracker(handles);

% --- Executes on button press in btnZoomToRegion.
function btnZoomToRegion_Callback(hObject, eventdata, handles)
% hObject    handle to btnZoomToRegion (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
answer = get(hObject,'Value');
if answer == 1
    set(handles.editLwXLim,'Enable','on');
    set(handles.editUpXLim,'Enable','on');
    set(handles.editLwYLim,'Enable','on');
    set(handles.editUpYLim,'Enable','on');
    set(handles.textXPixel,'Enable','on');
    set(handles.textYPixel,'Enable','on');
    
    handles.lwXLim=str2double(get(handles.editLwXLim,'String'));
    handles.upXLim=str2double(get(handles.editUpXLim,'String'));
    handles.lwYLim=str2double(get(handles.editLwYLim,'String'));
    handles.upYLim=str2double(get(handles.editUpYLim,'String'));
    
elseif answer == 0
    set(handles.editLwXLim,'Enable','off');
    set(handles.editUpXLim,'Enable','off');
    set(handles.editLwYLim,'Enable','off');
    set(handles.editUpYLim,'Enable','off');
    set(handles.textXPixel,'Enable','off');
    set(handles.textYPixel,'Enable','off');
    
end

guidata(hObject,handles);
tracker(handles);

% --- Executes on button press in btnZoomHold.
function btnZoomHold_Callback(hObject, eventdata, handles)
% hObject    handle to btnZoomHold (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

handles.config.zoomHold = get(hObject,'Value');
guidata(hObject, handles);


function editZoomFact_Callback(hObject, eventdata, handles)
% hObject    handle to editZoomFact (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer = str2double(get(hObject,'String'));
zFact=-2.25*answer+400;
if zFact <= 0, zFact=1; end
handles.zoomFactor = zFact;
guidata(hObject, handles);
tracker(handles);

% --- Executes during object creation, after setting all properties.
function editZoomFact_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editZoomFact (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editLwXLim_Callback(hObject, eventdata, handles)
% hObject    handle to editLwXLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer=str2double(get(handles.editLwXLim,'String'));
handles.lwXLim = answer;
guidata(hObject, handles);
tracker(handles);

% --- Executes during object creation, after setting all properties.
function editLwXLim_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editLwXLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editUpXLim_Callback(hObject, eventdata, handles)
% hObject    handle to editUpXLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer=str2double(get(handles.editUpXLim,'String'));
handles.upXLim = answer;
guidata(hObject, handles);
tracker(handles);

% --- Executes during object creation, after setting all properties.
function editUpXLim_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editUpXLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function editLwYLim_Callback(hObject, eventdata, handles)
% hObject    handle to editLwYLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer=str2double(get(handles.editLwYLim,'String'));
handles.lwYLim = answer;
guidata(hObject, handles);
tracker(handles);

% --- Executes during object creation, after setting all properties.
function editLwYLim_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editLwYLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function editUpYLim_Callback(hObject, eventdata, handles)
% hObject    handle to editUpYLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

answer=str2double(get(handles.editUpYLim,'String'));
handles.upYLim = answer;
guidata(hObject, handles);
tracker(handles);

% --- Executes during object creation, after setting all properties.
function editUpYLim_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editUpYLim (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%=========================================================================%
%======================        TRACE INFO           ======================%
%=========================================================================%

function editLt_Callback(hObject, eventdata, handles)
% hObject    handle to editLt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes during object creation, after setting all properties.
function editLt_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editLt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editAccMean_Callback(hObject, eventdata, handles)
% hObject    handle to editAccMean (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editAccMean_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAccMean (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editDonMean_Callback(hObject, eventdata, handles)
% hObject    handle to editDonMean (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editDonMean_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editDonMean (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editSnr1_Callback(hObject, eventdata, handles)
% hObject    handle to editSnr1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editSnr1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editSnr1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editSnr2_Callback(hObject, eventdata, handles)
% hObject    handle to editSnr2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editSnr2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editSnr2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function editCC_Callback(hObject, eventdata, handles)
% hObject    handle to editCC (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes during object creation, after setting all properties.
function editCC_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editCC (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%=========================================================================%
%======================   MOLECULE ID   ==================================%
%=========================================================================%

function editIdCh1_Callback(hObject, eventdata, handles)
% hObject    handle to editIdCh1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editIdCh1_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function editIdCh2_Callback(hObject, eventdata, handles)
% hObject    handle to editIdCh2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes during object creation, after setting all properties.
function editIdCh2_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%=========================================================================%
%======================   THRESHOLDING              ======================%
%=========================================================================%

% --- Executes during object creation, after setting all properties.
function sldCrosstalk_CreateFcn(hObject, eventdata, handles)
if isequal(get(hObject,'BackgroundColor'), ...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes during object creation, after setting all properties.
function sldThreshold_CreateFcn(hObject, eventdata, handles)
if isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes during object creation, after setting all properties.
function edCrosstalk_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes during object creation, after setting all properties.
function edThreshold_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'),...
        get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


%=========================================================================%
%======================   SWITCH PROFILE  ON/OFF    ======================%
%=========================================================================%
% --------------------------------------------------------------------
function tBarProfileOn_ClickedCallback(hObject, eventdata, handles)
% hObject    handle to tBarProfileOn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
profile on

% --------------------------------------------------------------------
function tBarProfileOff_ClickedCallback(hObject, eventdata, handles)
% hObject    handle to tBarProfileOff (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
profile off
profile report

%=========================================================================%
%======================          DIFFUSION          ======================%
%=========================================================================%

% --- Executes when selected object is changed in uibuttongroupDiffusion.
function uibuttongroupDiffusion_SelectionChangedFcn(hObject, eventdata, handles)
% hObject    handle to the selected object in uibuttongroupDiffusion 
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

switch(get(eventdata.NewValue,'Tag'))
    case 'radiobttnImb'
        %mode=get(handles.radiobttnImb,'string');
        handles.config.diffMode = 0;
    case 'radiobttnCnf'
        %mode=get(handles.radiobttnCnf,'string');
        handles.config.diffMode = 1;
    case 'radiobttnFre'
        %mode=get(handles.radiobttnFre,'string');
        handles.config.diffMode = 2;
    case 'radiobttnSpr'
        %mode=get(handles.radiobttnSpr,'string');
        handles.config.diffMode = 3;
    case 'radiobttnOff'
        %mode=get(handles.radiobttnOff,'string');
        handles.config.diffMode = 4;
end
guidata(hObject, handles);
plotter(handles);


